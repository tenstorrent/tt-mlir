// REQUIRES: opmodel
// RUN: ttmlir-opt --ttir-to-ttnn-backend-pipeline="system-desc-path=%system_desc_path% enable-optimizer=true memory-layout-analysis-enabled=true max-legal-layouts=32" -o resnet50_last_module_ttnn.mlir %s --mlir-print-debuginfo
// RUN: ttmlir-translate --ttnn-to-flatbuffer resnet50_last_module_ttnn.mlir > %t.ttnn
#loc = loc("ResNetForImageClassification")
module @ResNetLayer4Module2 attributes {} {
  func.func @forward(%arg0: tensor<8x2048x7x7xbf16> {ttcore.argument_type = #ttcore.argument_type<input>, ttir.name = "input"}, %arg1: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_816"}, %arg2: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_816_fork_clone178"}, %arg3: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_832"}, %arg4: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_832_fork_clone89"}, %arg5: tensor<1x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_848"}, %arg6: tensor<1x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_848_fork_clone32"}, %arg7: tensor<512x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.2.layer.0.convolution.weight"}, %arg8: tensor<512x512x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.2.layer.1.convolution.weight"}, %arg9: tensor<2048x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.2.layer.2.convolution.weight"}, %arg10: tensor<2048x1000xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "classifier.1.weight"}, %arg11: tensor<1000xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "classifier.1.bias"}) -> (tensor<8x1000xbf16> {ttir.name = "output"}) {
    %0 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc1)
    %1 = "ttir.relu"(%arg0, %0) : (tensor<8x2048x7x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc2)
    %2 = ttir.empty() : tensor<8x7x2048x7xbf16> loc(#loc3)
    %3 = "ttir.transpose"(%1, %2) <{dim0 = -3 : si32, dim1 = -2 : si32}> : (tensor<8x2048x7x7xbf16>, tensor<8x7x2048x7xbf16>) -> tensor<8x7x2048x7xbf16> loc(#loc4)
    %4 = ttir.empty() : tensor<8x7x7x2048xbf16> loc(#loc5)
    %5 = "ttir.transpose"(%3, %4) <{dim0 = -2 : si32, dim1 = -1 : si32}> : (tensor<8x7x2048x7xbf16>, tensor<8x7x7x2048xbf16>) -> tensor<8x7x7x2048xbf16> loc(#loc6)
    %6 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc7)
    %7 = "ttir.conv2d"(%5, %arg7, %6) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 0, 0, 0, 0>, stride = array<i32: 1, 1>}> {channel_last = 1 : si32} : (tensor<8x7x7x2048xbf16>, tensor<512x2048x1x1xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc8)
    %8 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc9)
    %9 = "ttir.multiply"(%7, %arg1, %8) : (tensor<8x7x7x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc10)
    %10 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc11)
    %11 = "ttir.add"(%9, %arg2, %10) : (tensor<8x7x7x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc12)
    %12 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc13)
    %13 = "ttir.relu"(%11, %12) : (tensor<8x7x7x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc14)
    %14 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc15)
    %15 = "ttir.conv2d"(%13, %arg8, %14) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 1, 1, 1, 1>, stride = array<i32: 1, 1>}> {channel_last = 1 : si32} : (tensor<8x7x7x512xbf16>, tensor<512x512x3x3xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc16)
    %16 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc17)
    %17 = "ttir.multiply"(%15, %arg3, %16) : (tensor<8x7x7x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc18)
    %18 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc19)
    %19 = "ttir.add"(%17, %arg4, %18) : (tensor<8x7x7x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc20)
    %20 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc21)
    %21 = "ttir.relu"(%19, %20) : (tensor<8x7x7x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc22)
    %22 = ttir.empty() : tensor<8x7x7x2048xbf16> loc(#loc23)
    %23 = "ttir.conv2d"(%21, %arg9, %22) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 0, 0, 0, 0>, stride = array<i32: 1, 1>}> {channel_last = 1 : si32} : (tensor<8x7x7x512xbf16>, tensor<2048x512x1x1xbf16>, tensor<8x7x7x2048xbf16>) -> tensor<8x7x7x2048xbf16> loc(#loc24)
    %24 = ttir.empty() : tensor<8x7x2048x7xbf16> loc(#loc25)
    %25 = "ttir.transpose"(%23, %24) <{dim0 = -2 : si32, dim1 = -1 : si32}> : (tensor<8x7x7x2048xbf16>, tensor<8x7x2048x7xbf16>) -> tensor<8x7x2048x7xbf16> loc(#loc26)
    %26 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc27)
    %27 = "ttir.transpose"(%25, %26) <{dim0 = -3 : si32, dim1 = -2 : si32}> : (tensor<8x7x2048x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc28)
    %28 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc29)
    %29 = "ttir.multiply"(%27, %arg5, %28) : (tensor<8x2048x7x7xbf16>, tensor<1x2048x1x1xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc30)
    %30 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc31)
    %31 = "ttir.add"(%29, %arg6, %30) : (tensor<8x2048x7x7xbf16>, tensor<1x2048x1x1xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc32)
    %32 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc33)
    %33 = "ttir.add"(%31, %1, %32) : (tensor<8x2048x7x7xbf16>, tensor<8x2048x7x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc34)
    %34 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc35)
    %35 = "ttir.relu"(%33, %34) : (tensor<8x2048x7x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc36)
    %36 = ttir.empty() : tensor<8x1x2048x49xbf16> loc(#loc37)
    %37 = "ttir.reshape"(%35, %36) <{shape = [8 : i32, 1 : i32, 2048 : i32, 49 : i32]}> : (tensor<8x2048x7x7xbf16>, tensor<8x1x2048x49xbf16>) -> tensor<8x1x2048x49xbf16> loc(#loc38)
    %38 = ttir.empty() : tensor<8x1x49x2048xbf16> loc(#loc39)
    %39 = "ttir.transpose"(%37, %38) <{dim0 = -2 : si32, dim1 = -1 : si32}> : (tensor<8x1x2048x49xbf16>, tensor<8x1x49x2048xbf16>) -> tensor<8x1x49x2048xbf16> loc(#loc40)
    %40 = ttir.empty() : tensor<8x1x1x2048xbf16> loc(#loc41)
    %41 = "ttir.mean"(%39, %40) <{dim_arg = [-2 : i32], keep_dim = true}> : (tensor<8x1x49x2048xbf16>, tensor<8x1x1x2048xbf16>) -> tensor<8x1x1x2048xbf16> loc(#loc42)
    %42 = ttir.empty() : tensor<8x2048xbf16> loc(#loc43)
    %43 = "ttir.reshape"(%41, %42) <{shape = [8 : i32, 2048 : i32]}> : (tensor<8x1x1x2048xbf16>, tensor<8x2048xbf16>) -> tensor<8x2048xbf16> loc(#loc44)
    %44 = ttir.empty() : tensor<8x1000xbf16> loc(#loc45)
    %45 = "ttir.matmul"(%43, %arg10, %44) <{transpose_a = false, transpose_b = false}> : (tensor<8x2048xbf16>, tensor<2048x1000xbf16>, tensor<8x1000xbf16>) -> tensor<8x1000xbf16> loc(#loc46)
    %46 = ttir.empty() : tensor<8x1000xbf16> loc(#loc47)
    %47 = "ttir.add"(%45, %arg11, %46) : (tensor<8x1000xbf16>, tensor<1000xbf16>, tensor<8x1000xbf16>) -> tensor<8x1000xbf16> loc(#loc48)
    return %47 : tensor<8x1000xbf16>
  }
}
#loc1 = loc("empty_for_input_relu")
#loc2 = loc("input_relu")
#loc3 = loc("empty_for_input_transpose1")
#loc4 = loc("input_transpose1")
#loc5 = loc("empty_for_input_transpose2")
#loc6 = loc("input_transpose2")
#loc7 = loc("empty_for_conv1")
#loc8 = loc("conv1")
#loc9 = loc("empty_for_conv1_scale")
#loc10 = loc("conv1_scale")
#loc11 = loc("empty_for_conv1_bias")
#loc12 = loc("conv1_bias")
#loc13 = loc("empty_for_conv1_relu")
#loc14 = loc("conv1_relu")
#loc15 = loc("empty_for_conv2")
#loc16 = loc("conv2")
#loc17 = loc("empty_for_conv2_scale")
#loc18 = loc("conv2_scale")
#loc19 = loc("empty_for_conv2_bias")
#loc20 = loc("conv2_bias")
#loc21 = loc("empty_for_conv2_relu")
#loc22 = loc("conv2_relu")
#loc23 = loc("empty_for_conv3")
#loc24 = loc("conv3")
#loc25 = loc("empty_for_transpose1")
#loc26 = loc("transpose1")
#loc27 = loc("empty_for_transpose2")
#loc28 = loc("transpose2")
#loc29 = loc("empty_for_conv3_scale")
#loc30 = loc("conv3_scale")
#loc31 = loc("empty_for_conv3_bias")
#loc32 = loc("conv3_bias")
#loc33 = loc("empty_for_residual")
#loc34 = loc("residual_add")
#loc35 = loc("empty_for_final_relu")
#loc36 = loc("final_relu")
#loc37 = loc("empty_for_reshape1")
#loc38 = loc("reshape1")
#loc39 = loc("empty_for_final_transpose")
#loc40 = loc("final_transpose")
#loc41 = loc("empty_for_mean")
#loc42 = loc("mean")
#loc43 = loc("empty_for_final_reshape")
#loc44 = loc("final_reshape")
#loc45 = loc("empty_for_matmul")
#loc46 = loc("matmul")
#loc47 = loc("empty_for_final_add")
#loc48 = loc("final_add")
