// REQUIRES: opmodel
// RUN: ttmlir-opt --ttir-to-ttnn-backend-pipeline="system-desc-path=%system_desc_path% enable-optimizer=true memory-layout-analysis-enabled=true max-legal-layouts=32" -o resnet50_layer4_module1_ttnn.mlir %s --mlir-print-debuginfo
// RUN: ttmlir-translate --ttnn-to-flatbuffer resnet50_layer4_module1_ttnn.mlir > %t.ttnn
#loc = loc("ResNetForImageClassification")
module @ResNetLayer4Module1 attributes {} {
  func.func @forward(%arg0: tensor<8x14x14x1024xbf16> {ttcore.argument_type = #ttcore.argument_type<input>, ttir.name = "input"}, %arg1: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_703"}, %arg2: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_703_fork_clone287"}, %arg3: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_719"}, %arg4: tensor<1x1x1x512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_719_fork_clone190"}, %arg5: tensor<1x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_735"}, %arg6: tensor<1x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_735_fork_clone101"}, %arg7: tensor<1x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_750"}, %arg8: tensor<1x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>, ttir.name = "input_0_multiply_750_fork_clone105"}, %arg9: tensor<512x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.0.layer.0.convolution.weight"}, %arg10: tensor<512x512x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.0.layer.1.convolution.weight"}, %arg11: tensor<2048x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.0.layer.2.convolution.weight"}, %arg12: tensor<2048x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>, ttir.name = "resnet.encoder.stages.3.layers.0.shortcut.convolution.weight"}) -> (tensor<8x2048x7x7xbf16> {ttir.name = "output"}) {
    %0 = ttir.empty() : tensor<8x14x14x1024xbf16> loc(#loc1)
    %1 = "ttir.relu"(%arg0, %0) : (tensor<8x14x14x1024xbf16>, tensor<8x14x14x1024xbf16>) -> tensor<8x14x14x1024xbf16> loc(#loc2)
    %2 = ttir.empty() : tensor<8x14x14x512xbf16> loc(#loc3)
    %3 = "ttir.conv2d"(%1, %arg9, %2) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 0, 0, 0, 0>, stride = array<i32: 1, 1>}> {channel_last = 1 : si32} : (tensor<8x14x14x1024xbf16>, tensor<512x1024x1x1xbf16>, tensor<8x14x14x512xbf16>) -> tensor<8x14x14x512xbf16> loc(#loc4)
    %4 = ttir.empty() : tensor<8x14x14x512xbf16> loc(#loc5)
    %5 = "ttir.multiply"(%3, %arg1, %4) : (tensor<8x14x14x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x14x14x512xbf16>) -> tensor<8x14x14x512xbf16> loc(#loc6)
    %6 = ttir.empty() : tensor<8x14x14x512xbf16> loc(#loc7)
    %7 = "ttir.add"(%5, %arg2, %6) : (tensor<8x14x14x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x14x14x512xbf16>) -> tensor<8x14x14x512xbf16> loc(#loc8)
    %8 = ttir.empty() : tensor<8x14x14x512xbf16> loc(#loc9)
    %9 = "ttir.relu"(%7, %8) : (tensor<8x14x14x512xbf16>, tensor<8x14x14x512xbf16>) -> tensor<8x14x14x512xbf16> loc(#loc10)
    %10 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc11)
    %11 = "ttir.conv2d"(%9, %arg10, %10) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 1, 1, 1, 1>, stride = array<i32: 2, 2>}> {channel_last = 1 : si32} : (tensor<8x14x14x512xbf16>, tensor<512x512x3x3xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc12)
    %12 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc13)
    %13 = "ttir.multiply"(%11, %arg3, %12) : (tensor<8x7x7x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc14)
    %14 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc15)
    %15 = "ttir.add"(%13, %arg4, %14) : (tensor<8x7x7x512xbf16>, tensor<1x1x1x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc16)
    %16 = ttir.empty() : tensor<8x7x7x512xbf16> loc(#loc17)
    %17 = "ttir.relu"(%15, %16) : (tensor<8x7x7x512xbf16>, tensor<8x7x7x512xbf16>) -> tensor<8x7x7x512xbf16> loc(#loc18)
    %18 = ttir.empty() : tensor<8x7x7x2048xbf16> loc(#loc19)
    %19 = "ttir.conv2d"(%17, %arg11, %18) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 0, 0, 0, 0>, stride = array<i32: 1, 1>}> {channel_last = 1 : si32} : (tensor<8x7x7x512xbf16>, tensor<2048x512x1x1xbf16>, tensor<8x7x7x2048xbf16>) -> tensor<8x7x7x2048xbf16> loc(#loc20)
    %20 = ttir.empty() : tensor<8x7x2048x7xbf16> loc(#loc21)
    %21 = "ttir.transpose"(%19, %20) <{dim0 = -2 : si32, dim1 = -1 : si32}> : (tensor<8x7x7x2048xbf16>, tensor<8x7x2048x7xbf16>) -> tensor<8x7x2048x7xbf16> loc(#loc22)
    %22 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc23)
    %23 = "ttir.transpose"(%21, %22) <{dim0 = -3 : si32, dim1 = -2 : si32}> : (tensor<8x7x2048x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc24)
    %24 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc25)
    %25 = "ttir.multiply"(%23, %arg5, %24) : (tensor<8x2048x7x7xbf16>, tensor<1x2048x1x1xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc26)
    %26 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc27)
    %27 = "ttir.add"(%25, %arg6, %26) : (tensor<8x2048x7x7xbf16>, tensor<1x2048x1x1xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc28)
    %28 = ttir.empty() : tensor<8x7x7x2048xbf16> loc(#loc29)
    %29 = "ttir.conv2d"(%1, %arg12, %28) <{dilation = array<i32: 1, 1>, groups = 1 : i32, padding = array<i32: 0, 0, 0, 0>, stride = array<i32: 2, 2>}> {channel_last = 1 : si32} : (tensor<8x14x14x1024xbf16>, tensor<2048x1024x1x1xbf16>, tensor<8x7x7x2048xbf16>) -> tensor<8x7x7x2048xbf16> loc(#loc30)
    %30 = ttir.empty() : tensor<8x7x2048x7xbf16> loc(#loc31)
    %31 = "ttir.transpose"(%29, %30) <{dim0 = -2 : si32, dim1 = -1 : si32}> : (tensor<8x7x7x2048xbf16>, tensor<8x7x2048x7xbf16>) -> tensor<8x7x2048x7xbf16> loc(#loc32)
    %32 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc33)
    %33 = "ttir.transpose"(%31, %32) <{dim0 = -3 : si32, dim1 = -2 : si32}> : (tensor<8x7x2048x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc34)
    %34 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc35)
    %35 = "ttir.multiply"(%33, %arg7, %34) : (tensor<8x2048x7x7xbf16>, tensor<1x2048x1x1xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc36)
    %36 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc37)
    %37 = "ttir.add"(%35, %arg8, %36) : (tensor<8x2048x7x7xbf16>, tensor<1x2048x1x1xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc38)
    %38 = ttir.empty() : tensor<8x2048x7x7xbf16> loc(#loc39)
    %39 = "ttir.add"(%27, %37, %38) : (tensor<8x2048x7x7xbf16>, tensor<8x2048x7x7xbf16>, tensor<8x2048x7x7xbf16>) -> tensor<8x2048x7x7xbf16> loc(#loc40)
    return %39 : tensor<8x2048x7x7xbf16>
  }
}
#loc1 = loc("empty_for_initial_relu")
#loc2 = loc("initial_relu")
#loc3 = loc("empty_for_conv1")
#loc4 = loc("conv1")
#loc5 = loc("empty_for_conv1_scale")
#loc6 = loc("conv1_scale")
#loc7 = loc("empty_for_conv1_bias")
#loc8 = loc("conv1_bias")
#loc9 = loc("empty_for_conv1_relu")
#loc10 = loc("conv1_relu")
#loc11 = loc("empty_for_conv2")
#loc12 = loc("conv2")
#loc13 = loc("empty_for_conv2_scale")
#loc14 = loc("conv2_scale")
#loc15 = loc("empty_for_conv2_bias")
#loc16 = loc("conv2_bias")
#loc17 = loc("empty_for_conv2_relu")
#loc18 = loc("conv2_relu")
#loc19 = loc("empty_for_conv3")
#loc20 = loc("conv3")
#loc21 = loc("empty_for_transpose1")
#loc22 = loc("transpose1")
#loc23 = loc("empty_for_transpose2")
#loc24 = loc("transpose2")
#loc25 = loc("empty_for_conv3_scale")
#loc26 = loc("conv3_scale")
#loc27 = loc("empty_for_conv3_bias")
#loc28 = loc("conv3_bias")
#loc29 = loc("empty_for_shortcut")
#loc30 = loc("shortcut")
#loc31 = loc("empty_for_shortcut_transpose1")
#loc32 = loc("shortcut_transpose1")
#loc33 = loc("empty_for_shortcut_transpose2")
#loc34 = loc("shortcut_transpose2")
#loc35 = loc("empty_for_shortcut_scale")
#loc36 = loc("shortcut_scale")
#loc37 = loc("empty_for_shortcut_bias")
#loc38 = loc("shortcut_bias")
#loc39 = loc("empty_for_residual")
#loc40 = loc("residual_add")
