// RUN: ttmlir-opt --ttcore-register-device="system-desc-path=%system_desc_path%" -o %t.mlir %s
// RUN: FileCheck %s --input-file=%t.mlir
// RUN: ttmlir-translate --ttnn-to-flatbuffer -o %t.ttnn %t.mlir
#system_memory = #ttnn.buffer_type<system_memory>
#dram = #ttnn.buffer_type<dram>
#l1 = #ttnn.buffer_type<l1>
#ttnn_layout_host_rm_bf16 = #ttnn.ttnn_layout<(d0, d1) -> (d0, d1), <1x1>, memref<32x32xbf16, #system_memory>>
#ttnn_layout_device_rm_bf16 = #ttnn.ttnn_layout<(d0, d1) -> (d0, d1), <1x1>, memref<32x32xbf16, #dram>, <interleaved>>
#ttnn_layout_device_tile_bf16 = #ttnn.ttnn_layout<(d0, d1) -> (d0, d1), <1x1>, memref<1x1x!ttcore.tile<32x32, bf16>, #dram>, <interleaved>>
#ttnn_layout_l1_tile_bf16 = #ttnn.ttnn_layout<(d0, d1) -> (d0, d1), <1x1>, memref<1x1x!ttcore.tile<32x32, bf16>, #l1>, <interleaved>>
module attributes {} {

    // Test different const op configurations
    //

    // Test case when const is created on host
    func.func @const_on_host() -> tensor<32x32xbf16, #ttnn_layout_host_rm_bf16> {
        // CHECK: ttnn.constant
        %0 = "ttnn.constant"() <{value = dense_resource<dense_attr> : tensor<32x32xbf16>, dtype = #ttcore.supportedDataTypes<bf16>, layout = #ttnn.layout<row_major>, memory_config = #ttnn.memory_config<#system_memory>}> : () -> tensor<32x32xbf16, #ttnn_layout_host_rm_bf16>
        return %0 : tensor<32x32xbf16, #ttnn_layout_host_rm_bf16>
    }

    // Test case when const is created in DRAM in RowMajor layout
    func.func @const_on_device_row_major() -> tensor<32x32xbf16, #ttnn_layout_device_rm_bf16> {
        %0 = "ttnn.get_device"() <{mesh_shape = #ttnn<mesh_shape 1x1>}> : () -> !ttnn.device
        // CHECK: ttnn.constant
        %1 = "ttnn.constant"(%0) <{value = dense_resource<dense_attr> : tensor<32x32xbf16>, dtype = #ttcore.supportedDataTypes<bf16>, layout = #ttnn.layout<row_major>, memory_config = #ttnn.memory_config<#dram, <interleaved>>}> : (!ttnn.device) -> tensor<32x32xbf16, #ttnn_layout_device_rm_bf16>
        return %1 : tensor<32x32xbf16, #ttnn_layout_device_rm_bf16>
    }

    // Test case when const is created in DRAM in Tile layout
    func.func @const_on_device_tile() -> tensor<32x32xbf16, #ttnn_layout_device_tile_bf16> {
        %0 = "ttnn.get_device"() <{mesh_shape = #ttnn<mesh_shape 1x1>}> : () -> !ttnn.device
        // CHECK: ttnn.constant
        %1 = "ttnn.constant"(%0) <{value = dense_resource<dense_attr> : tensor<32x32xbf16>, dtype = #ttcore.supportedDataTypes<bf16>, layout = #ttnn.layout<tile>, memory_config = #ttnn.memory_config<#dram, <interleaved>>}> : (!ttnn.device) -> tensor<32x32xbf16, #ttnn_layout_device_tile_bf16>
        return %1 : tensor<32x32xbf16, #ttnn_layout_device_tile_bf16>
    }

    // Test case when const is created in L1 in Tile layout
    func.func @const_on_l1_tile() -> tensor<32x32xbf16, #ttnn_layout_l1_tile_bf16> {
        %0 = "ttnn.get_device"() <{mesh_shape = #ttnn<mesh_shape 1x1>}> : () -> !ttnn.device
        // CHECK: ttnn.constant
        %1 = "ttnn.constant"(%0) <{value = dense_resource<dense_attr> : tensor<32x32xbf16>, dtype = #ttcore.supportedDataTypes<bf16>, layout = #ttnn.layout<tile>, memory_config = #ttnn.memory_config<#l1, <interleaved>>}> : (!ttnn.device) -> tensor<32x32xbf16, #ttnn_layout_l1_tile_bf16>
        return %1 : tensor<32x32xbf16, #ttnn_layout_l1_tile_bf16>
    }
}
{-#
    dialect_resources: {
        builtin: {
            // This should encode for 32x32xbf16 values which are both 2.0
            // 0x020000000 is a hex string blob
            // 512 values 0x003F is 1.0 in bfloat16
            // 512 values 0x0040 is 2.0 in bfloat16
            dense_attr: "0x00040000803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040803f0040"
        }
    }
#-}
