module @resnet50_xla_full_model {
  func.func @main(%arg0: tensor<1000xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg1: tensor<2048x1000xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg2: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg3: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg4: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg5: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg6: tensor<2048x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg7: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg8: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg9: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg10: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg11: tensor<1024x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg12: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg13: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg14: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg15: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg16: tensor<512x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg17: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg18: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg19: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg20: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg21: tensor<256x64x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg22: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg23: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg24: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg25: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg26: tensor<64x3x7x7xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg27: tensor<1x3x224x224xbf16> {ttcore.argument_type = #ttcore.argument_type<input>}, %arg28: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg29: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg30: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg31: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg32: tensor<256x64x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg33: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg34: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg35: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg36: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg37: tensor<64x64x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg38: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg39: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg40: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg41: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg42: tensor<64x64x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg43: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg44: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg45: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg46: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg47: tensor<256x64x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg48: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg49: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg50: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg51: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg52: tensor<64x64x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg53: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg54: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg55: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg56: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg57: tensor<64x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg58: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg59: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg60: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg61: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg62: tensor<256x64x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg63: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg64: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg65: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg66: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg67: tensor<64x64x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg68: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg69: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg70: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg71: tensor<64xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg72: tensor<64x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg73: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg74: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg75: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg76: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg77: tensor<512x128x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg78: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg79: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg80: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg81: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg82: tensor<128x128x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg83: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg84: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg85: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg86: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg87: tensor<128x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg88: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg89: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg90: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg91: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg92: tensor<512x128x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg93: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg94: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg95: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg96: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg97: tensor<128x128x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg98: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg99: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg100: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg101: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg102: tensor<128x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg103: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg104: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg105: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg106: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg107: tensor<512x128x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg108: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg109: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg110: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg111: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg112: tensor<128x128x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg113: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg114: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg115: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg116: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg117: tensor<128x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg118: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg119: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg120: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg121: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg122: tensor<512x128x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg123: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg124: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg125: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg126: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg127: tensor<128x128x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg128: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg129: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg130: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg131: tensor<128xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg132: tensor<128x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg133: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg134: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg135: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg136: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg137: tensor<1024x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg138: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg139: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg140: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg141: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg142: tensor<256x256x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg143: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg144: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg145: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg146: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg147: tensor<256x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg148: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg149: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg150: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg151: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg152: tensor<1024x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg153: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg154: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg155: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg156: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg157: tensor<256x256x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg158: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg159: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg160: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg161: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg162: tensor<256x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg163: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg164: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg165: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg166: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg167: tensor<1024x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg168: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg169: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg170: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg171: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg172: tensor<256x256x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg173: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg174: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg175: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg176: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg177: tensor<256x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg178: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg179: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg180: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg181: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg182: tensor<1024x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg183: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg184: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg185: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg186: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg187: tensor<256x256x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg188: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg189: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg190: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg191: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg192: tensor<256x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg193: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg194: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg195: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg196: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg197: tensor<1024x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg198: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg199: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg200: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg201: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg202: tensor<256x256x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg203: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg204: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg205: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg206: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg207: tensor<256x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg208: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg209: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg210: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg211: tensor<1024xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg212: tensor<1024x256x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg213: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg214: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg215: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg216: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg217: tensor<256x256x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg218: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg219: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg220: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg221: tensor<256xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg222: tensor<256x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg223: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg224: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg225: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg226: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg227: tensor<2048x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg228: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg229: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg230: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg231: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg232: tensor<512x512x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg233: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg234: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg235: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg236: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg237: tensor<512x1024x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg238: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg239: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg240: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg241: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg242: tensor<2048x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg243: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg244: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg245: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg246: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg247: tensor<512x512x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg248: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg249: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg250: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg251: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg252: tensor<512x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg253: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg254: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg255: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg256: tensor<2048xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg257: tensor<2048x512x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg258: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg259: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg260: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg261: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg262: tensor<512x512x3x3xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg263: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg264: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg265: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg266: tensor<512xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}, %arg267: tensor<512x2048x1x1xbf16> {ttcore.argument_type = #ttcore.argument_type<parameter>}) -> tensor<1x1000xbf16> {
    %0 = "ttir.constant"() <{value = dense<2.038570e-02> : tensor<1x2048xbf16>}> : () -> tensor<1x2048xbf16>
    %1 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x2048x7x7xbf16>}> : () -> tensor<1x2048x7x7xbf16>
    %2 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x512x7x7xbf16>}> : () -> tensor<1x512x7x7xbf16>
    %3 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x512x14x14xbf16>}> : () -> tensor<1x512x14x14xbf16>
    %4 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x1024x14x14xbf16>}> : () -> tensor<1x1024x14x14xbf16>
    %5 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x256x14x14xbf16>}> : () -> tensor<1x256x14x14xbf16>
    %6 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x256x28x28xbf16>}> : () -> tensor<1x256x28x28xbf16>
    %7 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x512x28x28xbf16>}> : () -> tensor<1x512x28x28xbf16>
    %8 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x128x28x28xbf16>}> : () -> tensor<1x128x28x28xbf16>
    %9 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x128x56x56xbf16>}> : () -> tensor<1x128x56x56xbf16>
    %10 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x256x56x56xbf16>}> : () -> tensor<1x256x56x56xbf16>
    %11 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x64x56x56xbf16>}> : () -> tensor<1x64x56x56xbf16>
    %12 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x64x112x112xbf16>}> : () -> tensor<1x64x112x112xbf16>
    %13 = "ttir.constant"() <{value = dense<0xFF80> : tensor<bf16>}> : () -> tensor<bf16>
    %14 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<bf16>}> : () -> tensor<bf16>
    %15 = ttir.empty() : tensor<1x64x112x112xbf16>
    %16 = "ttir.convolution"(%arg27, %arg26, %15) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 3, 3, 3, 3>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x3x224x224xbf16>, tensor<64x3x7x7xbf16>, tensor<1x64x112x112xbf16>) -> tensor<1x64x112x112xbf16>
    %17 = ttir.empty() : tensor<1x64x112x112xbf16>
    %18 = "ttir.batch_norm"(%16, %arg25, %arg24, %arg23, %arg22, %17) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x112x112xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x112x112xbf16>) -> tensor<1x64x112x112xbf16>
    %19 = ttir.empty() : tensor<1x64x112x112xbf16>
    %20 = "ttir.maximum"(%18, %12, %19) : (tensor<1x64x112x112xbf16>, tensor<1x64x112x112xbf16>, tensor<1x64x112x112xbf16>) -> tensor<1x64x112x112xbf16>
    %21 = ttir.empty() : tensor<1x64x114x114xbf16>
    %22 = "ttir.pad"(%20, %21) <{padding = array<i32: 0, 0, 0, 0, 1, 1, 1, 1>, value = 0xFF800000 : f32}> : (tensor<1x64x112x112xbf16>, tensor<1x64x114x114xbf16>) -> tensor<1x64x114x114xbf16>
    %23 = ttir.empty() : tensor<1x64x56x56xbf16>
    %24 = "ttir.pooling"(%22, %23) <{base_dilations = array<i64: 1, 1, 1, 1>, operandSegmentSizes = array<i32: 1, 1>, padding = array<i64: 0, 0, 0, 0, 0, 0, 0, 0>, pooling_method = #ttir<pooling_method Max>, window_dilations = array<i64: 1, 1, 1, 1>, window_dimensions = array<i64: 1, 1, 3, 3>, window_strides = array<i64: 1, 1, 2, 2>}> : (tensor<1x64x114x114xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %25 = ttir.empty() : tensor<1x64x56x56xbf16>
    %26 = "ttir.convolution"(%24, %arg42, %25) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<64x64x1x1xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %27 = ttir.empty() : tensor<1x64x56x56xbf16>
    %28 = "ttir.batch_norm"(%26, %arg41, %arg40, %arg39, %arg38, %27) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x56x56xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %29 = ttir.empty() : tensor<1x64x56x56xbf16>
    %30 = "ttir.maximum"(%28, %11, %29) : (tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %31 = ttir.empty() : tensor<1x64x56x56xbf16>
    %32 = "ttir.convolution"(%30, %arg37, %31) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<64x64x3x3xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %33 = ttir.empty() : tensor<1x64x56x56xbf16>
    %34 = "ttir.batch_norm"(%32, %arg36, %arg35, %arg34, %arg33, %33) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x56x56xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %35 = ttir.empty() : tensor<1x64x56x56xbf16>
    %36 = "ttir.maximum"(%34, %11, %35) : (tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %37 = ttir.empty() : tensor<1x256x56x56xbf16>
    %38 = "ttir.convolution"(%36, %arg32, %37) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<256x64x1x1xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %39 = ttir.empty() : tensor<1x256x56x56xbf16>
    %40 = "ttir.batch_norm"(%38, %arg31, %arg30, %arg29, %arg28, %39) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %41 = ttir.empty() : tensor<1x256x56x56xbf16>
    %42 = "ttir.convolution"(%24, %arg21, %41) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<256x64x1x1xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %43 = ttir.empty() : tensor<1x256x56x56xbf16>
    %44 = "ttir.batch_norm"(%42, %arg20, %arg19, %arg18, %arg17, %43) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %45 = ttir.empty() : tensor<1x256x56x56xbf16>
    %46 = "ttir.add"(%40, %44, %45) : (tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %47 = ttir.empty() : tensor<1x256x56x56xbf16>
    %48 = "ttir.maximum"(%46, %10, %47) : (tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %49 = ttir.empty() : tensor<1x64x56x56xbf16>
    %50 = "ttir.convolution"(%48, %arg57, %49) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x56x56xbf16>, tensor<64x256x1x1xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %51 = ttir.empty() : tensor<1x64x56x56xbf16>
    %52 = "ttir.batch_norm"(%50, %arg56, %arg55, %arg54, %arg53, %51) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x56x56xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %53 = ttir.empty() : tensor<1x64x56x56xbf16>
    %54 = "ttir.maximum"(%52, %11, %53) : (tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %55 = ttir.empty() : tensor<1x64x56x56xbf16>
    %56 = "ttir.convolution"(%54, %arg52, %55) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<64x64x3x3xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %57 = ttir.empty() : tensor<1x64x56x56xbf16>
    %58 = "ttir.batch_norm"(%56, %arg51, %arg50, %arg49, %arg48, %57) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x56x56xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %59 = ttir.empty() : tensor<1x64x56x56xbf16>
    %60 = "ttir.maximum"(%58, %11, %59) : (tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %61 = ttir.empty() : tensor<1x256x56x56xbf16>
    %62 = "ttir.convolution"(%60, %arg47, %61) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<256x64x1x1xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %63 = ttir.empty() : tensor<1x256x56x56xbf16>
    %64 = "ttir.batch_norm"(%62, %arg46, %arg45, %arg44, %arg43, %63) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %65 = ttir.empty() : tensor<1x256x56x56xbf16>
    %66 = "ttir.add"(%64, %48, %65) : (tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %67 = ttir.empty() : tensor<1x256x56x56xbf16>
    %68 = "ttir.maximum"(%66, %10, %67) : (tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %69 = ttir.empty() : tensor<1x64x56x56xbf16>
    %70 = "ttir.convolution"(%68, %arg72, %69) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x56x56xbf16>, tensor<64x256x1x1xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %71 = ttir.empty() : tensor<1x64x56x56xbf16>
    %72 = "ttir.batch_norm"(%70, %arg71, %arg70, %arg69, %arg68, %71) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x56x56xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %73 = ttir.empty() : tensor<1x64x56x56xbf16>
    %74 = "ttir.maximum"(%72, %11, %73) : (tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %75 = ttir.empty() : tensor<1x64x56x56xbf16>
    %76 = "ttir.convolution"(%74, %arg67, %75) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<64x64x3x3xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %77 = ttir.empty() : tensor<1x64x56x56xbf16>
    %78 = "ttir.batch_norm"(%76, %arg66, %arg65, %arg64, %arg63, %77) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x56x56xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<64xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %79 = ttir.empty() : tensor<1x64x56x56xbf16>
    %80 = "ttir.maximum"(%78, %11, %79) : (tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>, tensor<1x64x56x56xbf16>) -> tensor<1x64x56x56xbf16>
    %81 = ttir.empty() : tensor<1x256x56x56xbf16>
    %82 = "ttir.convolution"(%80, %arg62, %81) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x56x56xbf16>, tensor<256x64x1x1xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %83 = ttir.empty() : tensor<1x256x56x56xbf16>
    %84 = "ttir.batch_norm"(%82, %arg61, %arg60, %arg59, %arg58, %83) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %85 = ttir.empty() : tensor<1x256x56x56xbf16>
    %86 = "ttir.add"(%84, %68, %85) : (tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %87 = ttir.empty() : tensor<1x256x56x56xbf16>
    %88 = "ttir.maximum"(%86, %10, %87) : (tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>, tensor<1x256x56x56xbf16>) -> tensor<1x256x56x56xbf16>
    %89 = ttir.empty() : tensor<1x128x56x56xbf16>
    %90 = "ttir.convolution"(%88, %arg87, %89) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x56x56xbf16>, tensor<128x256x1x1xbf16>, tensor<1x128x56x56xbf16>) -> tensor<1x128x56x56xbf16>
    %91 = ttir.empty() : tensor<1x128x56x56xbf16>
    %92 = "ttir.batch_norm"(%90, %arg86, %arg85, %arg84, %arg83, %91) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x56x56xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x56x56xbf16>) -> tensor<1x128x56x56xbf16>
    %93 = ttir.empty() : tensor<1x128x56x56xbf16>
    %94 = "ttir.maximum"(%92, %9, %93) : (tensor<1x128x56x56xbf16>, tensor<1x128x56x56xbf16>, tensor<1x128x56x56xbf16>) -> tensor<1x128x56x56xbf16>
    %95 = ttir.empty() : tensor<1x128x28x28xbf16>
    %96 = "ttir.convolution"(%94, %arg82, %95) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x128x56x56xbf16>, tensor<128x128x3x3xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %97 = ttir.empty() : tensor<1x128x28x28xbf16>
    %98 = "ttir.batch_norm"(%96, %arg81, %arg80, %arg79, %arg78, %97) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %99 = ttir.empty() : tensor<1x128x28x28xbf16>
    %100 = "ttir.maximum"(%98, %8, %99) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %101 = ttir.empty() : tensor<1x512x28x28xbf16>
    %102 = "ttir.convolution"(%100, %arg77, %101) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<512x128x1x1xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %103 = ttir.empty() : tensor<1x512x28x28xbf16>
    %104 = "ttir.batch_norm"(%102, %arg76, %arg75, %arg74, %arg73, %103) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %105 = ttir.empty() : tensor<1x512x28x28xbf16>
    %106 = "ttir.convolution"(%88, %arg16, %105) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x256x56x56xbf16>, tensor<512x256x1x1xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %107 = ttir.empty() : tensor<1x512x28x28xbf16>
    %108 = "ttir.batch_norm"(%106, %arg15, %arg14, %arg13, %arg12, %107) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %109 = ttir.empty() : tensor<1x512x28x28xbf16>
    %110 = "ttir.add"(%104, %108, %109) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %111 = ttir.empty() : tensor<1x512x28x28xbf16>
    %112 = "ttir.maximum"(%110, %7, %111) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %113 = ttir.empty() : tensor<1x128x28x28xbf16>
    %114 = "ttir.convolution"(%112, %arg102, %113) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xbf16>, tensor<128x512x1x1xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %115 = ttir.empty() : tensor<1x128x28x28xbf16>
    %116 = "ttir.batch_norm"(%114, %arg101, %arg100, %arg99, %arg98, %115) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %117 = ttir.empty() : tensor<1x128x28x28xbf16>
    %118 = "ttir.maximum"(%116, %8, %117) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %119 = ttir.empty() : tensor<1x128x28x28xbf16>
    %120 = "ttir.convolution"(%118, %arg97, %119) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<128x128x3x3xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %121 = ttir.empty() : tensor<1x128x28x28xbf16>
    %122 = "ttir.batch_norm"(%120, %arg96, %arg95, %arg94, %arg93, %121) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %123 = ttir.empty() : tensor<1x128x28x28xbf16>
    %124 = "ttir.maximum"(%122, %8, %123) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %125 = ttir.empty() : tensor<1x512x28x28xbf16>
    %126 = "ttir.convolution"(%124, %arg92, %125) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<512x128x1x1xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %127 = ttir.empty() : tensor<1x512x28x28xbf16>
    %128 = "ttir.batch_norm"(%126, %arg91, %arg90, %arg89, %arg88, %127) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %129 = ttir.empty() : tensor<1x512x28x28xbf16>
    %130 = "ttir.add"(%128, %112, %129) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %131 = ttir.empty() : tensor<1x512x28x28xbf16>
    %132 = "ttir.maximum"(%130, %7, %131) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %133 = ttir.empty() : tensor<1x128x28x28xbf16>
    %134 = "ttir.convolution"(%132, %arg117, %133) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xbf16>, tensor<128x512x1x1xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %135 = ttir.empty() : tensor<1x128x28x28xbf16>
    %136 = "ttir.batch_norm"(%134, %arg116, %arg115, %arg114, %arg113, %135) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %137 = ttir.empty() : tensor<1x128x28x28xbf16>
    %138 = "ttir.maximum"(%136, %8, %137) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %139 = ttir.empty() : tensor<1x128x28x28xbf16>
    %140 = "ttir.convolution"(%138, %arg112, %139) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<128x128x3x3xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %141 = ttir.empty() : tensor<1x128x28x28xbf16>
    %142 = "ttir.batch_norm"(%140, %arg111, %arg110, %arg109, %arg108, %141) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %143 = ttir.empty() : tensor<1x128x28x28xbf16>
    %144 = "ttir.maximum"(%142, %8, %143) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %145 = ttir.empty() : tensor<1x512x28x28xbf16>
    %146 = "ttir.convolution"(%144, %arg107, %145) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<512x128x1x1xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %147 = ttir.empty() : tensor<1x512x28x28xbf16>
    %148 = "ttir.batch_norm"(%146, %arg106, %arg105, %arg104, %arg103, %147) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %149 = ttir.empty() : tensor<1x512x28x28xbf16>
    %150 = "ttir.add"(%148, %132, %149) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %151 = ttir.empty() : tensor<1x512x28x28xbf16>
    %152 = "ttir.maximum"(%150, %7, %151) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %153 = ttir.empty() : tensor<1x128x28x28xbf16>
    %154 = "ttir.convolution"(%152, %arg132, %153) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xbf16>, tensor<128x512x1x1xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %155 = ttir.empty() : tensor<1x128x28x28xbf16>
    %156 = "ttir.batch_norm"(%154, %arg131, %arg130, %arg129, %arg128, %155) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %157 = ttir.empty() : tensor<1x128x28x28xbf16>
    %158 = "ttir.maximum"(%156, %8, %157) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %159 = ttir.empty() : tensor<1x128x28x28xbf16>
    %160 = "ttir.convolution"(%158, %arg127, %159) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<128x128x3x3xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %161 = ttir.empty() : tensor<1x128x28x28xbf16>
    %162 = "ttir.batch_norm"(%160, %arg126, %arg125, %arg124, %arg123, %161) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x28x28xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<128xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %163 = ttir.empty() : tensor<1x128x28x28xbf16>
    %164 = "ttir.maximum"(%162, %8, %163) : (tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>, tensor<1x128x28x28xbf16>) -> tensor<1x128x28x28xbf16>
    %165 = ttir.empty() : tensor<1x512x28x28xbf16>
    %166 = "ttir.convolution"(%164, %arg122, %165) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x28x28xbf16>, tensor<512x128x1x1xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %167 = ttir.empty() : tensor<1x512x28x28xbf16>
    %168 = "ttir.batch_norm"(%166, %arg121, %arg120, %arg119, %arg118, %167) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %169 = ttir.empty() : tensor<1x512x28x28xbf16>
    %170 = "ttir.add"(%168, %152, %169) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %171 = ttir.empty() : tensor<1x512x28x28xbf16>
    %172 = "ttir.maximum"(%170, %7, %171) : (tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>, tensor<1x512x28x28xbf16>) -> tensor<1x512x28x28xbf16>
    %173 = ttir.empty() : tensor<1x256x28x28xbf16>
    %174 = "ttir.convolution"(%172, %arg147, %173) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xbf16>, tensor<256x512x1x1xbf16>, tensor<1x256x28x28xbf16>) -> tensor<1x256x28x28xbf16>
    %175 = ttir.empty() : tensor<1x256x28x28xbf16>
    %176 = "ttir.batch_norm"(%174, %arg146, %arg145, %arg144, %arg143, %175) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x28x28xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x28x28xbf16>) -> tensor<1x256x28x28xbf16>
    %177 = ttir.empty() : tensor<1x256x28x28xbf16>
    %178 = "ttir.maximum"(%176, %6, %177) : (tensor<1x256x28x28xbf16>, tensor<1x256x28x28xbf16>, tensor<1x256x28x28xbf16>) -> tensor<1x256x28x28xbf16>
    %179 = ttir.empty() : tensor<1x256x14x14xbf16>
    %180 = "ttir.convolution"(%178, %arg142, %179) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x256x28x28xbf16>, tensor<256x256x3x3xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %181 = ttir.empty() : tensor<1x256x14x14xbf16>
    %182 = "ttir.batch_norm"(%180, %arg141, %arg140, %arg139, %arg138, %181) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %183 = ttir.empty() : tensor<1x256x14x14xbf16>
    %184 = "ttir.maximum"(%182, %5, %183) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %185 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %186 = "ttir.convolution"(%184, %arg137, %185) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<1024x256x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %187 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %188 = "ttir.batch_norm"(%186, %arg136, %arg135, %arg134, %arg133, %187) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %189 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %190 = "ttir.convolution"(%172, %arg11, %189) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x512x28x28xbf16>, tensor<1024x512x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %191 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %192 = "ttir.batch_norm"(%190, %arg10, %arg9, %arg8, %arg7, %191) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %193 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %194 = "ttir.add"(%188, %192, %193) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %195 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %196 = "ttir.maximum"(%194, %4, %195) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %197 = ttir.empty() : tensor<1x256x14x14xbf16>
    %198 = "ttir.convolution"(%196, %arg162, %197) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xbf16>, tensor<256x1024x1x1xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %199 = ttir.empty() : tensor<1x256x14x14xbf16>
    %200 = "ttir.batch_norm"(%198, %arg161, %arg160, %arg159, %arg158, %199) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %201 = ttir.empty() : tensor<1x256x14x14xbf16>
    %202 = "ttir.maximum"(%200, %5, %201) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %203 = ttir.empty() : tensor<1x256x14x14xbf16>
    %204 = "ttir.convolution"(%202, %arg157, %203) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<256x256x3x3xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %205 = ttir.empty() : tensor<1x256x14x14xbf16>
    %206 = "ttir.batch_norm"(%204, %arg156, %arg155, %arg154, %arg153, %205) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %207 = ttir.empty() : tensor<1x256x14x14xbf16>
    %208 = "ttir.maximum"(%206, %5, %207) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %209 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %210 = "ttir.convolution"(%208, %arg152, %209) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<1024x256x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %211 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %212 = "ttir.batch_norm"(%210, %arg151, %arg150, %arg149, %arg148, %211) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %213 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %214 = "ttir.add"(%212, %196, %213) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %215 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %216 = "ttir.maximum"(%214, %4, %215) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %217 = ttir.empty() : tensor<1x256x14x14xbf16>
    %218 = "ttir.convolution"(%216, %arg177, %217) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xbf16>, tensor<256x1024x1x1xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %219 = ttir.empty() : tensor<1x256x14x14xbf16>
    %220 = "ttir.batch_norm"(%218, %arg176, %arg175, %arg174, %arg173, %219) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %221 = ttir.empty() : tensor<1x256x14x14xbf16>
    %222 = "ttir.maximum"(%220, %5, %221) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %223 = ttir.empty() : tensor<1x256x14x14xbf16>
    %224 = "ttir.convolution"(%222, %arg172, %223) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<256x256x3x3xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %225 = ttir.empty() : tensor<1x256x14x14xbf16>
    %226 = "ttir.batch_norm"(%224, %arg171, %arg170, %arg169, %arg168, %225) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %227 = ttir.empty() : tensor<1x256x14x14xbf16>
    %228 = "ttir.maximum"(%226, %5, %227) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %229 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %230 = "ttir.convolution"(%228, %arg167, %229) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<1024x256x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %231 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %232 = "ttir.batch_norm"(%230, %arg166, %arg165, %arg164, %arg163, %231) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %233 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %234 = "ttir.add"(%232, %216, %233) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %235 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %236 = "ttir.maximum"(%234, %4, %235) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %237 = ttir.empty() : tensor<1x256x14x14xbf16>
    %238 = "ttir.convolution"(%236, %arg192, %237) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xbf16>, tensor<256x1024x1x1xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %239 = ttir.empty() : tensor<1x256x14x14xbf16>
    %240 = "ttir.batch_norm"(%238, %arg191, %arg190, %arg189, %arg188, %239) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %241 = ttir.empty() : tensor<1x256x14x14xbf16>
    %242 = "ttir.maximum"(%240, %5, %241) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %243 = ttir.empty() : tensor<1x256x14x14xbf16>
    %244 = "ttir.convolution"(%242, %arg187, %243) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<256x256x3x3xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %245 = ttir.empty() : tensor<1x256x14x14xbf16>
    %246 = "ttir.batch_norm"(%244, %arg186, %arg185, %arg184, %arg183, %245) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %247 = ttir.empty() : tensor<1x256x14x14xbf16>
    %248 = "ttir.maximum"(%246, %5, %247) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %249 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %250 = "ttir.convolution"(%248, %arg182, %249) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<1024x256x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %251 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %252 = "ttir.batch_norm"(%250, %arg181, %arg180, %arg179, %arg178, %251) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %253 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %254 = "ttir.add"(%252, %236, %253) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %255 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %256 = "ttir.maximum"(%254, %4, %255) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %257 = ttir.empty() : tensor<1x256x14x14xbf16>
    %258 = "ttir.convolution"(%256, %arg207, %257) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xbf16>, tensor<256x1024x1x1xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %259 = ttir.empty() : tensor<1x256x14x14xbf16>
    %260 = "ttir.batch_norm"(%258, %arg206, %arg205, %arg204, %arg203, %259) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %261 = ttir.empty() : tensor<1x256x14x14xbf16>
    %262 = "ttir.maximum"(%260, %5, %261) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %263 = ttir.empty() : tensor<1x256x14x14xbf16>
    %264 = "ttir.convolution"(%262, %arg202, %263) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<256x256x3x3xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %265 = ttir.empty() : tensor<1x256x14x14xbf16>
    %266 = "ttir.batch_norm"(%264, %arg201, %arg200, %arg199, %arg198, %265) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %267 = ttir.empty() : tensor<1x256x14x14xbf16>
    %268 = "ttir.maximum"(%266, %5, %267) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %269 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %270 = "ttir.convolution"(%268, %arg197, %269) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<1024x256x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %271 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %272 = "ttir.batch_norm"(%270, %arg196, %arg195, %arg194, %arg193, %271) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %273 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %274 = "ttir.add"(%272, %256, %273) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %275 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %276 = "ttir.maximum"(%274, %4, %275) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %277 = ttir.empty() : tensor<1x256x14x14xbf16>
    %278 = "ttir.convolution"(%276, %arg222, %277) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xbf16>, tensor<256x1024x1x1xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %279 = ttir.empty() : tensor<1x256x14x14xbf16>
    %280 = "ttir.batch_norm"(%278, %arg221, %arg220, %arg219, %arg218, %279) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %281 = ttir.empty() : tensor<1x256x14x14xbf16>
    %282 = "ttir.maximum"(%280, %5, %281) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %283 = ttir.empty() : tensor<1x256x14x14xbf16>
    %284 = "ttir.convolution"(%282, %arg217, %283) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<256x256x3x3xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %285 = ttir.empty() : tensor<1x256x14x14xbf16>
    %286 = "ttir.batch_norm"(%284, %arg216, %arg215, %arg214, %arg213, %285) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x14x14xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<256xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %287 = ttir.empty() : tensor<1x256x14x14xbf16>
    %288 = "ttir.maximum"(%286, %5, %287) : (tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>, tensor<1x256x14x14xbf16>) -> tensor<1x256x14x14xbf16>
    %289 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %290 = "ttir.convolution"(%288, %arg212, %289) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x14x14xbf16>, tensor<1024x256x1x1xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %291 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %292 = "ttir.batch_norm"(%290, %arg211, %arg210, %arg209, %arg208, %291) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1024xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %293 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %294 = "ttir.add"(%292, %276, %293) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %295 = ttir.empty() : tensor<1x1024x14x14xbf16>
    %296 = "ttir.maximum"(%294, %4, %295) : (tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>, tensor<1x1024x14x14xbf16>) -> tensor<1x1024x14x14xbf16>
    %297 = ttir.empty() : tensor<1x512x14x14xbf16>
    %298 = "ttir.convolution"(%296, %arg237, %297) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xbf16>, tensor<512x1024x1x1xbf16>, tensor<1x512x14x14xbf16>) -> tensor<1x512x14x14xbf16>
    %299 = ttir.empty() : tensor<1x512x14x14xbf16>
    %300 = "ttir.batch_norm"(%298, %arg236, %arg235, %arg234, %arg233, %299) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x14x14xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x14x14xbf16>) -> tensor<1x512x14x14xbf16>
    %301 = ttir.empty() : tensor<1x512x14x14xbf16>
    %302 = "ttir.maximum"(%300, %3, %301) : (tensor<1x512x14x14xbf16>, tensor<1x512x14x14xbf16>, tensor<1x512x14x14xbf16>) -> tensor<1x512x14x14xbf16>
    %303 = ttir.empty() : tensor<1x512x7x7xbf16>
    %304 = "ttir.convolution"(%302, %arg232, %303) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x512x14x14xbf16>, tensor<512x512x3x3xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %305 = ttir.empty() : tensor<1x512x7x7xbf16>
    %306 = "ttir.batch_norm"(%304, %arg231, %arg230, %arg229, %arg228, %305) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x7x7xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %307 = ttir.empty() : tensor<1x512x7x7xbf16>
    %308 = "ttir.maximum"(%306, %2, %307) : (tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %309 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %310 = "ttir.convolution"(%308, %arg227, %309) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x7x7xbf16>, tensor<2048x512x1x1xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %311 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %312 = "ttir.batch_norm"(%310, %arg226, %arg225, %arg224, %arg223, %311) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x2048x7x7xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %313 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %314 = "ttir.convolution"(%296, %arg6, %313) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 2, 2>}> : (tensor<1x1024x14x14xbf16>, tensor<2048x1024x1x1xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %315 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %316 = "ttir.batch_norm"(%314, %arg5, %arg4, %arg3, %arg2, %315) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x2048x7x7xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %317 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %318 = "ttir.add"(%312, %316, %317) : (tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %319 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %320 = "ttir.maximum"(%318, %1, %319) : (tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %321 = ttir.empty() : tensor<1x512x7x7xbf16>
    %322 = "ttir.convolution"(%320, %arg252, %321) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x2048x7x7xbf16>, tensor<512x2048x1x1xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %323 = ttir.empty() : tensor<1x512x7x7xbf16>
    %324 = "ttir.batch_norm"(%322, %arg251, %arg250, %arg249, %arg248, %323) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x7x7xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %325 = ttir.empty() : tensor<1x512x7x7xbf16>
    %326 = "ttir.maximum"(%324, %2, %325) : (tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %327 = ttir.empty() : tensor<1x512x7x7xbf16>
    %328 = "ttir.convolution"(%326, %arg247, %327) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x7x7xbf16>, tensor<512x512x3x3xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %329 = ttir.empty() : tensor<1x512x7x7xbf16>
    %330 = "ttir.batch_norm"(%328, %arg246, %arg245, %arg244, %arg243, %329) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x7x7xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %331 = ttir.empty() : tensor<1x512x7x7xbf16>
    %332 = "ttir.maximum"(%330, %2, %331) : (tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %333 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %334 = "ttir.convolution"(%332, %arg242, %333) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x7x7xbf16>, tensor<2048x512x1x1xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %335 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %336 = "ttir.batch_norm"(%334, %arg241, %arg240, %arg239, %arg238, %335) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x2048x7x7xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %337 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %338 = "ttir.add"(%336, %320, %337) : (tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %339 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %340 = "ttir.maximum"(%338, %1, %339) : (tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %341 = ttir.empty() : tensor<1x512x7x7xbf16>
    %342 = "ttir.convolution"(%340, %arg267, %341) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x2048x7x7xbf16>, tensor<512x2048x1x1xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %343 = ttir.empty() : tensor<1x512x7x7xbf16>
    %344 = "ttir.batch_norm"(%342, %arg266, %arg265, %arg264, %arg263, %343) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x7x7xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %345 = ttir.empty() : tensor<1x512x7x7xbf16>
    %346 = "ttir.maximum"(%344, %2, %345) : (tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %347 = ttir.empty() : tensor<1x512x7x7xbf16>
    %348 = "ttir.convolution"(%346, %arg262, %347) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x7x7xbf16>, tensor<512x512x3x3xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %349 = ttir.empty() : tensor<1x512x7x7xbf16>
    %350 = "ttir.batch_norm"(%348, %arg261, %arg260, %arg259, %arg258, %349) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x7x7xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<512xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %351 = ttir.empty() : tensor<1x512x7x7xbf16>
    %352 = "ttir.maximum"(%350, %2, %351) : (tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>, tensor<1x512x7x7xbf16>) -> tensor<1x512x7x7xbf16>
    %353 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %354 = "ttir.convolution"(%352, %arg257, %353) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x7x7xbf16>, tensor<2048x512x1x1xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %355 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %356 = "ttir.batch_norm"(%354, %arg256, %arg255, %arg254, %arg253, %355) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x2048x7x7xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<2048xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %357 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %358 = "ttir.add"(%356, %340, %357) : (tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %359 = ttir.empty() : tensor<1x2048x7x7xbf16>
    %360 = "ttir.maximum"(%358, %1, %359) : (tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>, tensor<1x2048x7x7xbf16>) -> tensor<1x2048x7x7xbf16>
    %361 = ttir.empty() : tensor<1x2048xbf16>
    %362 = "ttir.sum"(%360, %361) <{dim_arg = [2 : i32, 3 : i32], keep_dim = false}> : (tensor<1x2048x7x7xbf16>, tensor<1x2048xbf16>) -> tensor<1x2048xbf16>
    %363 = ttir.empty() : tensor<1x2048xbf16>
    %364 = "ttir.multiply"(%362, %0, %363) : (tensor<1x2048xbf16>, tensor<1x2048xbf16>, tensor<1x2048xbf16>) -> tensor<1x2048xbf16>
    %365 = "ttir.dot_general"(%364, %arg1) <{batch_dims_lhs = array<i64>, batch_dims_rhs = array<i64>, contract_dims_lhs = array<i64: 1>, contract_dims_rhs = array<i64: 0>}> : (tensor<1x2048xbf16>, tensor<2048x1000xbf16>) -> tensor<1x1000xbf16>
    %366 = ttir.empty() : tensor<1x1000xbf16>
    %367 = "ttir.reshape"(%arg0, %366) <{shape = [1 : i32, 1000 : i32]}> : (tensor<1000xbf16>, tensor<1x1000xbf16>) -> tensor<1x1000xbf16>
    %368 = ttir.empty() : tensor<1x1000xbf16>
    %369 = "ttir.add"(%365, %367, %368) : (tensor<1x1000xbf16>, tensor<1x1000xbf16>, tensor<1x1000xbf16>) -> tensor<1x1000xbf16>
    return %369 : tensor<1x1000xbf16>
  }
}
