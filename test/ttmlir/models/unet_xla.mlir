module @SyncTensorsGraph.429 attributes {mhlo.cross_program_prefetches = [], mhlo.input_output_alias = [], mhlo.is_dynamic = false, mhlo.use_auto_spmd_partitioning = false, ttcore.meshes = #ttcore.meshes<[<"mesh" = 1x1>]>} {
  func.func @main(%arg0: tensor<1xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg1: tensor<1x64x1x1xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg2: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg3: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg4: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg5: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg6: tensor<64x64x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg7: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg8: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg9: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg10: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg11: tensor<64x128x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg12: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg13: tensor<128x64x2x2xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg14: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg15: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg16: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg17: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg18: tensor<128x128x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg19: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg20: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg21: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg22: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg23: tensor<128x256x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg24: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg25: tensor<256x128x2x2xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg26: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg27: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg28: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg29: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg30: tensor<256x256x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg31: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg32: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg33: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg34: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg35: tensor<256x512x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg36: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg37: tensor<512x256x2x2xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg38: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg39: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg40: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg41: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg42: tensor<512x512x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg43: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg44: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg45: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg46: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg47: tensor<512x1024x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg48: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg49: tensor<1024x512x2x2xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg50: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg51: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg52: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg53: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg54: tensor<1024x1024x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg55: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg56: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg57: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg58: tensor<1024xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg59: tensor<1024x512x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg60: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg61: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg62: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg63: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg64: tensor<512x512x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg65: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg66: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg67: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg68: tensor<512xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg69: tensor<512x256x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg70: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg71: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg72: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg73: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg74: tensor<256x256x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg75: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg76: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg77: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg78: tensor<256xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg79: tensor<256x128x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg80: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg81: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg82: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg83: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg84: tensor<128x128x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg85: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg86: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg87: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg88: tensor<128xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg89: tensor<128x64x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg90: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg91: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg92: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg93: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg94: tensor<64x64x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg95: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg96: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg97: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg98: tensor<64xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg99: tensor<64x3x3x3xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}, %arg100: tensor<1x3x224x224xf32> ) -> (tensor<1x1x224x224xf32> {ttcore.argument_type = #ttcore.argument_type<constant>}) {
    %0 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x1024x14x14xf32>}> : () -> tensor<1x1024x14x14xf32>
    %1 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x512x28x28xf32>}> : () -> tensor<1x512x28x28xf32>
    %2 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x256x56x56xf32>}> : () -> tensor<1x256x56x56xf32>
    %3 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x128x112x112xf32>}> : () -> tensor<1x128x112x112xf32>
    %4 = "ttir.constant"() <{value = dense<0.000000e+00> : tensor<1x64x224x224xf32>}> : () -> tensor<1x64x224x224xf32>
    %5 = "ttir.constant"() <{value = dense<0xFF800000> : tensor<f32>}> : () -> tensor<f32>
    %6 = ttir.empty() : tensor<1x64x224x224xf32>
    %7 = "ttir.convolution"(%arg100, %arg99, %6) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x3x224x224xf32>, tensor<64x3x3x3xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %8 = ttir.empty() : tensor<1x64x224x224xf32>
    %9 = "ttir.batch_norm"(%7, %arg98, %arg97, %arg96, %arg95, %8) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x224x224xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %10 = ttir.empty() : tensor<1x64x224x224xf32>
    %11 = "ttir.maximum"(%9, %4, %10) : (tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %12 = ttir.empty() : tensor<1x64x224x224xf32>
    %13 = "ttir.convolution"(%11, %arg94, %12) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x224x224xf32>, tensor<64x64x3x3xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %14 = ttir.empty() : tensor<1x64x224x224xf32>
    %15 = "ttir.batch_norm"(%13, %arg93, %arg92, %arg91, %arg90, %14) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x224x224xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %16 = ttir.empty() : tensor<1x64x224x224xf32>
    %17 = "ttir.maximum"(%15, %4, %16) : (tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %18 = ttir.empty() : tensor<1x64x112x112xf32>
    %19 = "ttir.pooling"(%17, %18) <{base_dilations = array<i64: 1, 1, 1, 1>, operandSegmentSizes = array<i32: 1, 1>, padding = array<i64: 0, 0, 0, 0, 0, 0, 0, 0>, pooling_method = #ttir<pooling_method Max>, window_dilations = array<i64: 1, 1, 1, 1>, window_dimensions = array<i64: 1, 1, 2, 2>, window_strides = array<i64: 1, 1, 2, 2>}> : (tensor<1x64x224x224xf32>, tensor<1x64x112x112xf32>) -> tensor<1x64x112x112xf32>
    %20 = ttir.empty() : tensor<1x128x112x112xf32>
    %21 = "ttir.convolution"(%19, %arg89, %20) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x112x112xf32>, tensor<128x64x3x3xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %22 = ttir.empty() : tensor<1x128x112x112xf32>
    %23 = "ttir.batch_norm"(%21, %arg88, %arg87, %arg86, %arg85, %22) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x112x112xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %24 = ttir.empty() : tensor<1x128x112x112xf32>
    %25 = "ttir.maximum"(%23, %3, %24) : (tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %26 = ttir.empty() : tensor<1x128x112x112xf32>
    %27 = "ttir.convolution"(%25, %arg84, %26) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x112x112xf32>, tensor<128x128x3x3xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %28 = ttir.empty() : tensor<1x128x112x112xf32>
    %29 = "ttir.batch_norm"(%27, %arg83, %arg82, %arg81, %arg80, %28) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x112x112xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %30 = ttir.empty() : tensor<1x128x112x112xf32>
    %31 = "ttir.maximum"(%29, %3, %30) : (tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %32 = ttir.empty() : tensor<1x128x56x56xf32>
    %33 = "ttir.pooling"(%31, %32) <{base_dilations = array<i64: 1, 1, 1, 1>, operandSegmentSizes = array<i32: 1, 1>, padding = array<i64: 0, 0, 0, 0, 0, 0, 0, 0>, pooling_method = #ttir<pooling_method Max>, window_dilations = array<i64: 1, 1, 1, 1>, window_dimensions = array<i64: 1, 1, 2, 2>, window_strides = array<i64: 1, 1, 2, 2>}> : (tensor<1x128x112x112xf32>, tensor<1x128x56x56xf32>) -> tensor<1x128x56x56xf32>
    %34 = ttir.empty() : tensor<1x256x56x56xf32>
    %35 = "ttir.convolution"(%33, %arg79, %34) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x56x56xf32>, tensor<256x128x3x3xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %36 = ttir.empty() : tensor<1x256x56x56xf32>
    %37 = "ttir.batch_norm"(%35, %arg78, %arg77, %arg76, %arg75, %36) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %38 = ttir.empty() : tensor<1x256x56x56xf32>
    %39 = "ttir.maximum"(%37, %2, %38) : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %40 = ttir.empty() : tensor<1x256x56x56xf32>
    %41 = "ttir.convolution"(%39, %arg74, %40) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x56x56xf32>, tensor<256x256x3x3xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %42 = ttir.empty() : tensor<1x256x56x56xf32>
    %43 = "ttir.batch_norm"(%41, %arg73, %arg72, %arg71, %arg70, %42) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %44 = ttir.empty() : tensor<1x256x56x56xf32>
    %45 = "ttir.maximum"(%43, %2, %44) : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %46 = ttir.empty() : tensor<1x256x28x28xf32>
    %47 = "ttir.pooling"(%45, %46) <{base_dilations = array<i64: 1, 1, 1, 1>, operandSegmentSizes = array<i32: 1, 1>, padding = array<i64: 0, 0, 0, 0, 0, 0, 0, 0>, pooling_method = #ttir<pooling_method Max>, window_dilations = array<i64: 1, 1, 1, 1>, window_dimensions = array<i64: 1, 1, 2, 2>, window_strides = array<i64: 1, 1, 2, 2>}> : (tensor<1x256x56x56xf32>, tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
    %48 = ttir.empty() : tensor<1x512x28x28xf32>
    %49 = "ttir.convolution"(%47, %arg69, %48) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x28x28xf32>, tensor<512x256x3x3xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %50 = ttir.empty() : tensor<1x512x28x28xf32>
    %51 = "ttir.batch_norm"(%49, %arg68, %arg67, %arg66, %arg65, %50) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %52 = ttir.empty() : tensor<1x512x28x28xf32>
    %53 = "ttir.maximum"(%51, %1, %52) : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %54 = ttir.empty() : tensor<1x512x28x28xf32>
    %55 = "ttir.convolution"(%53, %arg64, %54) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xf32>, tensor<512x512x3x3xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %56 = ttir.empty() : tensor<1x512x28x28xf32>
    %57 = "ttir.batch_norm"(%55, %arg63, %arg62, %arg61, %arg60, %56) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %58 = ttir.empty() : tensor<1x512x28x28xf32>
    %59 = "ttir.maximum"(%57, %1, %58) : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %60 = ttir.empty() : tensor<1x512x14x14xf32>
    %61 = "ttir.pooling"(%59, %60) <{base_dilations = array<i64: 1, 1, 1, 1>, operandSegmentSizes = array<i32: 1, 1>, padding = array<i64: 0, 0, 0, 0, 0, 0, 0, 0>, pooling_method = #ttir<pooling_method Max>, window_dilations = array<i64: 1, 1, 1, 1>, window_dimensions = array<i64: 1, 1, 2, 2>, window_strides = array<i64: 1, 1, 2, 2>}> : (tensor<1x512x28x28xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
    %62 = ttir.empty() : tensor<1x1024x14x14xf32>
    %63 = "ttir.convolution"(%61, %arg59, %62) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x14x14xf32>, tensor<1024x512x3x3xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %64 = ttir.empty() : tensor<1x1024x14x14xf32>
    %65 = "ttir.batch_norm"(%63, %arg58, %arg57, %arg56, %arg55, %64) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xf32>, tensor<1024xf32>, tensor<1024xf32>, tensor<1024xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %66 = ttir.empty() : tensor<1x1024x14x14xf32>
    %67 = "ttir.maximum"(%65, %0, %66) : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %68 = ttir.empty() : tensor<1x1024x14x14xf32>
    %69 = "ttir.convolution"(%67, %arg54, %68) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xf32>, tensor<1024x1024x3x3xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %70 = ttir.empty() : tensor<1x1024x14x14xf32>
    %71 = "ttir.batch_norm"(%69, %arg53, %arg52, %arg51, %arg50, %70) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x1024x14x14xf32>, tensor<1024xf32>, tensor<1024xf32>, tensor<1024xf32>, tensor<1024xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %72 = ttir.empty() : tensor<1x1024x14x14xf32>
    %73 = "ttir.maximum"(%71, %0, %72) : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32>
    %74 = ttir.empty() : tensor<2x2x512x1024xf32>
    %75 = "ttir.permute"(%arg49, %74) <{permutation = array<i64: 2, 3, 1, 0>}> : (tensor<1024x512x2x2xf32>, tensor<2x2x512x1024xf32>) -> tensor<2x2x512x1024xf32>
    %76 = ttir.empty() : tensor<2x2x512x1024xf32>
    %77 = "ttir.reverse"(%75, %76) <{dimensions = array<i64: 0, 1>}> : (tensor<2x2x512x1024xf32>, tensor<2x2x512x1024xf32>) -> tensor<2x2x512x1024xf32>
    %78 = ttir.empty() : tensor<1x512x28x28xf32>
    %79 = "ttir.convolution"(%73, %77, %78) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 2, kernel_input_feature = 3, kernel_spatial_dimensions = 0x1, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 2, 2>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x14x14xf32>, tensor<2x2x512x1024xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %80 = ttir.empty() : tensor<1x512x1x1xf32>
    %81 = "ttir.reshape"(%arg48, %80) <{shape = [1 : i32, 512 : i32, 1 : i32, 1 : i32]}> : (tensor<512xf32>, tensor<1x512x1x1xf32>) -> tensor<1x512x1x1xf32>
    %82 = ttir.empty() : tensor<1x512x28x28xf32>
    %83 = "ttir.broadcast"(%81, %82) <{broadcast_dimensions = array<i64: 1, 1, 28, 28>}> : (tensor<1x512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %84 = ttir.empty() : tensor<1x512x28x28xf32>
    %85 = "ttir.add"(%79, %83, %84) : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %86 = ttir.empty() : tensor<1x1024x28x28xf32>
    %87 = "ttir.concat"(%59, %85, %86) <{dim = 1 : si32}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x1024x28x28xf32>) -> tensor<1x1024x28x28xf32>
    %88 = ttir.empty() : tensor<1x512x28x28xf32>
    %89 = "ttir.convolution"(%87, %arg47, %88) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x1024x28x28xf32>, tensor<512x1024x3x3xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %90 = ttir.empty() : tensor<1x512x28x28xf32>
    %91 = "ttir.batch_norm"(%89, %arg46, %arg45, %arg44, %arg43, %90) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %92 = ttir.empty() : tensor<1x512x28x28xf32>
    %93 = "ttir.maximum"(%91, %1, %92) : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %94 = ttir.empty() : tensor<1x512x28x28xf32>
    %95 = "ttir.convolution"(%93, %arg42, %94) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xf32>, tensor<512x512x3x3xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %96 = ttir.empty() : tensor<1x512x28x28xf32>
    %97 = "ttir.batch_norm"(%95, %arg41, %arg40, %arg39, %arg38, %96) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x512x28x28xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<512xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %98 = ttir.empty() : tensor<1x512x28x28xf32>
    %99 = "ttir.maximum"(%97, %1, %98) : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32>
    %100 = ttir.empty() : tensor<2x2x256x512xf32>
    %101 = "ttir.permute"(%arg37, %100) <{permutation = array<i64: 2, 3, 1, 0>}> : (tensor<512x256x2x2xf32>, tensor<2x2x256x512xf32>) -> tensor<2x2x256x512xf32>
    %102 = ttir.empty() : tensor<2x2x256x512xf32>
    %103 = "ttir.reverse"(%101, %102) <{dimensions = array<i64: 0, 1>}> : (tensor<2x2x256x512xf32>, tensor<2x2x256x512xf32>) -> tensor<2x2x256x512xf32>
    %104 = ttir.empty() : tensor<1x256x56x56xf32>
    %105 = "ttir.convolution"(%99, %103, %104) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 2, kernel_input_feature = 3, kernel_spatial_dimensions = 0x1, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 2, 2>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x28x28xf32>, tensor<2x2x256x512xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %106 = ttir.empty() : tensor<1x256x1x1xf32>
    %107 = "ttir.reshape"(%arg36, %106) <{shape = [1 : i32, 256 : i32, 1 : i32, 1 : i32]}> : (tensor<256xf32>, tensor<1x256x1x1xf32>) -> tensor<1x256x1x1xf32>
    %108 = ttir.empty() : tensor<1x256x56x56xf32>
    %109 = "ttir.broadcast"(%107, %108) <{broadcast_dimensions = array<i64: 1, 1, 56, 56>}> : (tensor<1x256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %110 = ttir.empty() : tensor<1x256x56x56xf32>
    %111 = "ttir.add"(%105, %109, %110) : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %112 = ttir.empty() : tensor<1x512x56x56xf32>
    %113 = "ttir.concat"(%45, %111, %112) <{dim = 1 : si32}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x512x56x56xf32>) -> tensor<1x512x56x56xf32>
    %114 = ttir.empty() : tensor<1x256x56x56xf32>
    %115 = "ttir.convolution"(%113, %arg35, %114) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x512x56x56xf32>, tensor<256x512x3x3xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %116 = ttir.empty() : tensor<1x256x56x56xf32>
    %117 = "ttir.batch_norm"(%115, %arg34, %arg33, %arg32, %arg31, %116) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %118 = ttir.empty() : tensor<1x256x56x56xf32>
    %119 = "ttir.maximum"(%117, %2, %118) : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %120 = ttir.empty() : tensor<1x256x56x56xf32>
    %121 = "ttir.convolution"(%119, %arg30, %120) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x56x56xf32>, tensor<256x256x3x3xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %122 = ttir.empty() : tensor<1x256x56x56xf32>
    %123 = "ttir.batch_norm"(%121, %arg29, %arg28, %arg27, %arg26, %122) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x256x56x56xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<256xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %124 = ttir.empty() : tensor<1x256x56x56xf32>
    %125 = "ttir.maximum"(%123, %2, %124) : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32>
    %126 = ttir.empty() : tensor<2x2x128x256xf32>
    %127 = "ttir.permute"(%arg25, %126) <{permutation = array<i64: 2, 3, 1, 0>}> : (tensor<256x128x2x2xf32>, tensor<2x2x128x256xf32>) -> tensor<2x2x128x256xf32>
    %128 = ttir.empty() : tensor<2x2x128x256xf32>
    %129 = "ttir.reverse"(%127, %128) <{dimensions = array<i64: 0, 1>}> : (tensor<2x2x128x256xf32>, tensor<2x2x128x256xf32>) -> tensor<2x2x128x256xf32>
    %130 = ttir.empty() : tensor<1x128x112x112xf32>
    %131 = "ttir.convolution"(%125, %129, %130) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 2, kernel_input_feature = 3, kernel_spatial_dimensions = 0x1, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 2, 2>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x56x56xf32>, tensor<2x2x128x256xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %132 = ttir.empty() : tensor<1x128x1x1xf32>
    %133 = "ttir.reshape"(%arg24, %132) <{shape = [1 : i32, 128 : i32, 1 : i32, 1 : i32]}> : (tensor<128xf32>, tensor<1x128x1x1xf32>) -> tensor<1x128x1x1xf32>
    %134 = ttir.empty() : tensor<1x128x112x112xf32>
    %135 = "ttir.broadcast"(%133, %134) <{broadcast_dimensions = array<i64: 1, 1, 112, 112>}> : (tensor<1x128x1x1xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %136 = ttir.empty() : tensor<1x128x112x112xf32>
    %137 = "ttir.add"(%131, %135, %136) : (tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %138 = ttir.empty() : tensor<1x256x112x112xf32>
    %139 = "ttir.concat"(%31, %137, %138) <{dim = 1 : si32}> : (tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>, tensor<1x256x112x112xf32>) -> tensor<1x256x112x112xf32>
    %140 = ttir.empty() : tensor<1x128x112x112xf32>
    %141 = "ttir.convolution"(%139, %arg23, %140) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x256x112x112xf32>, tensor<128x256x3x3xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %142 = ttir.empty() : tensor<1x128x112x112xf32>
    %143 = "ttir.batch_norm"(%141, %arg22, %arg21, %arg20, %arg19, %142) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x112x112xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %144 = ttir.empty() : tensor<1x128x112x112xf32>
    %145 = "ttir.maximum"(%143, %3, %144) : (tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %146 = ttir.empty() : tensor<1x128x112x112xf32>
    %147 = "ttir.convolution"(%145, %arg18, %146) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x112x112xf32>, tensor<128x128x3x3xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %148 = ttir.empty() : tensor<1x128x112x112xf32>
    %149 = "ttir.batch_norm"(%147, %arg17, %arg16, %arg15, %arg14, %148) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x128x112x112xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<128xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %150 = ttir.empty() : tensor<1x128x112x112xf32>
    %151 = "ttir.maximum"(%149, %3, %150) : (tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>, tensor<1x128x112x112xf32>) -> tensor<1x128x112x112xf32>
    %152 = ttir.empty() : tensor<2x2x64x128xf32>
    %153 = "ttir.permute"(%arg13, %152) <{permutation = array<i64: 2, 3, 1, 0>}> : (tensor<128x64x2x2xf32>, tensor<2x2x64x128xf32>) -> tensor<2x2x64x128xf32>
    %154 = ttir.empty() : tensor<2x2x64x128xf32>
    %155 = "ttir.reverse"(%153, %154) <{dimensions = array<i64: 0, 1>}> : (tensor<2x2x64x128xf32>, tensor<2x2x64x128xf32>) -> tensor<2x2x64x128xf32>
    %156 = ttir.empty() : tensor<1x64x224x224xf32>
    %157 = "ttir.convolution"(%151, %155, %156) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 2, kernel_input_feature = 3, kernel_spatial_dimensions = 0x1, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 2, 2>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x112x112xf32>, tensor<2x2x64x128xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %158 = ttir.empty() : tensor<1x64x1x1xf32>
    %159 = "ttir.reshape"(%arg12, %158) <{shape = [1 : i32, 64 : i32, 1 : i32, 1 : i32]}> : (tensor<64xf32>, tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
    %160 = ttir.empty() : tensor<1x64x224x224xf32>
    %161 = "ttir.broadcast"(%159, %160) <{broadcast_dimensions = array<i64: 1, 1, 224, 224>}> : (tensor<1x64x1x1xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %162 = ttir.empty() : tensor<1x64x224x224xf32>
    %163 = "ttir.add"(%157, %161, %162) : (tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %164 = ttir.empty() : tensor<1x128x224x224xf32>
    %165 = "ttir.concat"(%17, %163, %164) <{dim = 1 : si32}> : (tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>, tensor<1x128x224x224xf32>) -> tensor<1x128x224x224xf32>
    %166 = ttir.empty() : tensor<1x64x224x224xf32>
    %167 = "ttir.convolution"(%165, %arg11, %166) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x128x224x224xf32>, tensor<64x128x3x3xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %168 = ttir.empty() : tensor<1x64x224x224xf32>
    %169 = "ttir.batch_norm"(%167, %arg10, %arg9, %arg8, %arg7, %168) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x224x224xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %170 = ttir.empty() : tensor<1x64x224x224xf32>
    %171 = "ttir.maximum"(%169, %4, %170) : (tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %172 = ttir.empty() : tensor<1x64x224x224xf32>
    %173 = "ttir.convolution"(%171, %arg6, %172) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 1, 1, 1, 1>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x224x224xf32>, tensor<64x64x3x3xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %174 = ttir.empty() : tensor<1x64x224x224xf32>
    %175 = "ttir.batch_norm"(%173, %arg5, %arg4, %arg3, %arg2, %174) <{dimension = 1 : i32, epsilon = 9.99999974E-6 : f32, training = false}> : (tensor<1x64x224x224xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<64xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %176 = ttir.empty() : tensor<1x64x224x224xf32>
    %177 = "ttir.maximum"(%175, %4, %176) : (tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>, tensor<1x64x224x224xf32>) -> tensor<1x64x224x224xf32>
    %178 = ttir.empty() : tensor<1x1x224x224xf32>
    %179 = "ttir.convolution"(%177, %arg1, %178) <{batch_group_count = 1 : i64, convolution_layout = #ttir<convolution_layout input_batch = 0, input_feature = 1, input_spatial_dimensions = 2x3, kernel_output_feature = 0, kernel_input_feature = 1, kernel_spatial_dimensions = 2x3, output_batch = 0, output_feature = 1, output_spatial_dimensions = 2x3>, feature_group_count = 1 : i64, input_dilation = array<i64: 1, 1>, padding = array<i64: 0, 0, 0, 0>, weight_dilation = array<i64: 1, 1>, window_reversal = array<i1: false, false>, window_strides = array<i64: 1, 1>}> : (tensor<1x64x224x224xf32>, tensor<1x64x1x1xf32>, tensor<1x1x224x224xf32>) -> tensor<1x1x224x224xf32>
    %180 = ttir.empty() : tensor<1x1x1x1xf32>
    %181 = "ttir.reshape"(%arg0, %180) <{shape = [1 : i32, 1 : i32, 1 : i32, 1 : i32]}> : (tensor<1xf32>, tensor<1x1x1x1xf32>) -> tensor<1x1x1x1xf32>
    %182 = ttir.empty() : tensor<1x1x224x224xf32>
    %183 = "ttir.broadcast"(%181, %182) <{broadcast_dimensions = array<i64: 1, 1, 224, 224>}> : (tensor<1x1x1x1xf32>, tensor<1x1x224x224xf32>) -> tensor<1x1x224x224xf32>
    %184 = ttir.empty() : tensor<1x1x224x224xf32>
    %185 = "ttir.add"(%179, %183, %184) : (tensor<1x1x224x224xf32>, tensor<1x1x224x224xf32>, tensor<1x1x224x224xf32>) -> tensor<1x1x224x224xf32>
    return %185 : tensor<1x1x224x224xf32>
  }
}