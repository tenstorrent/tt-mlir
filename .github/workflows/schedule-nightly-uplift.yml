# This workflow automates creation of uplift pull requests.
# Uplift PR is created daily to uplift the submodule to the latest version.

name: Nightly Uplift

on:
  schedule:
    - cron: '0 6 * * *'  # Runs at 06:00 UTC every day
  workflow_dispatch:  # Manual trigger
    inputs:
      branch_name:
        description: 'Branch name for the uplift PR'
        required: false
        type: string
        default: 'uplift'

jobs:
  uplift-pr:
    runs-on: ubuntu-latest

    env:
      TT_METAL_SUBMODULE_PATH: third_party/tt-metal

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: main

      - name: Set env variable for today's date
        run: |
          echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Check if branch already exists
        env:
          GH_TOKEN: ${{ github.token }}
          BRANCH_NAME: ${{ inputs.branch_name || 'uplift' }}
        run: |
          # Allow overwrites for the default "uplift" branch
          if [ "$BRANCH_NAME" = "uplift" ]; then
            echo "Using default 'uplift' branch. Overwrites are allowed."
            exit 0
          fi

          # For custom branch names, exit if the branch already exists
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "::error::Branch '$BRANCH_NAME' already exists. Exiting to avoid overwriting."
            echo "::error::Please delete the existing branch first or choose a different branch name."
            exit 1
          fi
          echo "Branch '$BRANCH_NAME' does not exist. Proceeding with uplift."

      - name: Fetch latest SHA of tt-metal submodule
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST_TT_METAL_VERSION=$(gh api repos/tenstorrent/tt-metal/commits/main --jq '.sha')
          echo "LATEST_TT_METAL_VERSION=$LATEST_TT_METAL_VERSION" >> $GITHUB_ENV

      - name: Check for dependency file changes and update Dockerfile
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          CURRENT_TT_METAL_VERSION=$(grep 'set(TT_METAL_VERSION' third_party/CMakeLists.txt | sed 's/.*"\(.*\)".*/\1/')

          # Fetch file hashes from current version
          CURRENT_INSTALL_DEPS_SHA=$(gh api repos/tenstorrent/tt-metal/contents/install_dependencies.sh?ref=$CURRENT_TT_METAL_VERSION --jq '.sha' 2>/dev/null || echo "not_found")
          CURRENT_SFPI_INFO_SHA=$(gh api repos/tenstorrent/tt-metal/contents/tt_metal/sfpi-info.sh?ref=$CURRENT_TT_METAL_VERSION --jq '.sha' 2>/dev/null || echo "not_found")
          CURRENT_SFPI_VERSION_SHA=$(gh api repos/tenstorrent/tt-metal/contents/tt_metal/sfpi-version?ref=$CURRENT_TT_METAL_VERSION --jq '.sha' 2>/dev/null || echo "not_found")

          # Fetch file hashes from latest version
          LATEST_INSTALL_DEPS_SHA=$(gh api repos/tenstorrent/tt-metal/contents/install_dependencies.sh?ref=${{ env.LATEST_TT_METAL_VERSION }} --jq '.sha' 2>/dev/null || echo "not_found")
          LATEST_SFPI_INFO_SHA=$(gh api repos/tenstorrent/tt-metal/contents/tt_metal/sfpi-info.sh?ref=${{ env.LATEST_TT_METAL_VERSION }} --jq '.sha' 2>/dev/null || echo "not_found")
          LATEST_SFPI_VERSION_SHA=$(gh api repos/tenstorrent/tt-metal/contents/tt_metal/sfpi-version?ref=${{ env.LATEST_TT_METAL_VERSION }} --jq '.sha' 2>/dev/null || echo "not_found")

          if [ "$CURRENT_INSTALL_DEPS_SHA" != "$LATEST_INSTALL_DEPS_SHA" ] || \
             [ "$CURRENT_SFPI_INFO_SHA" != "$LATEST_SFPI_INFO_SHA" ] || \
             [ "$CURRENT_SFPI_VERSION_SHA" != "$LATEST_SFPI_VERSION_SHA" ]; then
            # Update the commit hash in Dockerfile.base
            sed -i "s|ARG TT_METAL_DEPENDENCIES_COMMIT=.*|ARG TT_METAL_DEPENDENCIES_COMMIT=${{ env.LATEST_TT_METAL_VERSION }}|" .github/Dockerfile.base
            DOCKERFILE_UPDATED="**Note** Dockerfile.base is modified due to dependency updates"
            echo "DOCKERFILE_UPDATED=$DOCKERFILE_UPDATED" >> $GITHUB_ENV
          fi

      - name: Update tt-metal reference in third_party/CMakeLists.txt
        run: |
          echo "Updating tt-metal to SHA: ${{ env.LATEST_TT_METAL_VERSION }}"
          sed -i "s/set(TT_METAL_VERSION \".*\")/set(TT_METAL_VERSION \"${{ env.LATEST_TT_METAL_VERSION }}\")/" third_party/CMakeLists.txt

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        id: create-pr
        with:
          branch: ${{ inputs.branch_name || 'uplift' }}
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          base: main
          commit-message: "Uplift ${{ env.TT_METAL_SUBMODULE_PATH }} to ${{ env.LATEST_TT_METAL_VERSION }} ${{ env.TODAY }}"
          title: "Uplift ${{ env.TT_METAL_SUBMODULE_PATH }} to ${{ env.LATEST_TT_METAL_VERSION }} ${{ env.TODAY }}"
          body: |
            This PR uplifts the ${{ env.TT_METAL_SUBMODULE_PATH }} to the ${{ env.LATEST_TT_METAL_VERSION }}

            ${{ env.DOCKERFILE_UPDATED }}

            ### Checklist
            - **Frontend CI passing links**
              - [ ] [tt-forge-fe](https://github.com/tenstorrent/tt-forge-fe/actions/workflows/on-pr.yml):
              - [ ] [tt-xla (basic + models)](https://github.com/tenstorrent/tt-xla/actions/workflows/manual-test.yml):
            - **Follow-up Actions**
              - [ ] **Issues filed** to follow up on incomplete changes (if any):
              - [ ] **Frontend fix PRs** ready (if needed by this uplift):
          labels: uplift
          delete-branch: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Approve Pull Request
        if: ${{ steps.create-pr.outputs.pull-request-number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_APPROVE_TOKEN }}
        run: |
          echo "Pull Request Number - ${{ steps.create-pr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.create-pr.outputs.pull-request-url }}"
          gh pr review ${{ steps.create-pr.outputs.pull-request-number }} --approve

      # Note: Disable auto-merge for now until we are more confident
      # that uplift won't break the downstream projects
      #
      # - name: Enable Pull Request Automerge
      #   if: ${{ steps.create-pr.outputs.pull-request-number }}
      #   run: gh pr merge --squash --auto "${{ steps.create-pr.outputs.pull-request-number }}"
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
