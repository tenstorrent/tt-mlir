name: Update Project Date on Issue Update


on:
  issues:
    types: [opened, edited, deleted, closed, reopened, assigned, unassigned, labeled, unlabeled]
  issue_comment:
    types: [created, edited, deleted]


permissions:
  repository-projects: write
  issues: read
  contents: read

jobs:
  update_project_date:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        run: |
          echo "project_id=PVT_kwDOA9MHEM4AjeTl" >> $GITHUB_ENV
          echo "field_id=PVTF_lADOA9MHEM4AjeTlzgiiU18" >> $GITHUB_ENV


      - name: Get Issue ID
        id: get_issue_id
        run: |
          issue_number=${{ github.event.issue.number }}
          issue_details=$(curl -H "Authorization: Bearer ${{ secrets.TT_FORGE_PROJECT }}" -s "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number")
          issue_id=$(echo "$issue_details" | jq -r '.node_id')
          echo "issue_id=$issue_id" >> $GITHUB_ENV


      - name: Get Item ID for Issue
        id: get_item_id_by_issue_id
        run: |
          # Define the GraphQL query as a string
          QUERY='query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }'


          JSON_PAYLOAD=$(jq -n \
            --arg query "$QUERY" \
            --arg projectId "${{ env.project_id }}" \
            '{ query: $query, variables: { projectId: $projectId }}')


          # Make the GraphQL request
          RESPONSE=$(curl -s -X POST -H "Authorization: Bearer ${{ secrets.TT_FORGE_PROJECT }}" \
                                -H "Content-Type: application/json" \
                                -d "$JSON_PAYLOAD" \
                                https://api.github.com/graphql)


          # Debug: print entire response
          echo "RESPONSE: $RESPONSE"

          # Check if the response contains errors
          ERRORS=$(echo "$RESPONSE" | jq -r '.errors')
          if [[ "$ERRORS" != "null" ]]; then
            echo "GraphQL Error: $ERRORS"
            exit 1
          fi

          # Parse the item ID if it matches the issue_id
          ITEM_ID=$(echo "$RESPONSE" | jq -r --arg issue_id "$issue_id" \
                      '.data.node.items.nodes[] | select(.content.id==$issue_id) | .id')


          if [[ -z "$ITEM_ID" || "$ITEM_ID" == "null" ]]; then
            echo "Error: Issue not found in the first 100 project items."
            exit 1
          fi

          echo "Found ITEM_ID: $ITEM_ID"
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_OUTPUT

      - name: Use Found ITEM_ID
        if: steps.get_item_id_by_issue_id.outputs.ITEM_ID != ''
        run: echo "The ITEM_ID is ${{ steps.get_item_id_by_issue_id.outputs.ITEM_ID }}"


      - name: Update Project Field
        if: steps.get_item_id_by_issue_id.outputs.ITEM_ID != ''
        run: |
          current_date=$(date +%Y-%m-%d)
          curl -H "Authorization: Bearer ${{ secrets.TT_FORGE_PROJECT }}" \
               -H "Content-Type: application/json" \
               -d "{ \"query\": \"mutation { updateProjectV2ItemFieldValue(input: { projectId: \\\"${{ env.project_id }}\\\", itemId: \\\"${{ steps.get_item_id_by_issue_id.outputs.ITEM_ID }}\\\", fieldId: \\\"${{ env.field_id }}\\\", value: { date: \\\"$current_date\\\" } }) { clientMutationId } }\" }" \
               -X POST \
               "https://api.github.com/graphql"
