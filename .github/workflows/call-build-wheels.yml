name: Build ttmlir Wheel

on:
  workflow_dispatch:
    inputs:
      docker-tag:
        description: 'Docker tag for the manylinux image'
        required: false
        type: string
        default: 'latest'
      docker_image:
        description: 'Docker image to use for building wheels'
        required: false
        type: string
        default: 'ghcr.io/tenstorrent/tt-mlir/tt-mlir-ci-ubuntu-22-04:latest'
  workflow_call:
    inputs:
      docker-tag:
        description: 'Docker tag for the manylinux image'
        required: false
        type: string
        default: 'latest'
      docker_image:
        description: 'Docker image to use for building wheels'
        required: true
        type: string

jobs:
  build-ttmlir-wheel:
    timeout-minutes: 60
    name: Build ttmlir Python Wheel
    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          echo "wheel-output-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build ttmlir Wheel (manylinux)
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_ENVIRONMENT: "IN_CIBW_ENV=ON"
          CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/tenstorrent/tt-mlir/tt-mlir-manylinux-2-34:${{ inputs.docker-tag || 'latest' }}
        with:
          output-dir: ${{ steps.strings.outputs.wheel-output-dir }}
          package-dir: ${{ steps.strings.outputs.work-dir }}/python
          config-file: "${{ steps.strings.outputs.work-dir }}/python/pyproject.toml"

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ttmlir-wheel
          path: ${{ steps.strings.outputs.wheel-output-dir }}/*.whl
          if-no-files-found: error

  build-pykernel-wheel:
    timeout-minutes: 60
    name: Build pykernel Python Wheel
    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          echo "wheel-output-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build pykernel Wheel (manylinux)
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_ENVIRONMENT: "IN_CIBW_ENV=ON"
          CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/tenstorrent/tt-mlir/tt-mlir-manylinux-2-34:${{ inputs.docker-tag || 'latest' }}
        with:
          output-dir: ${{ steps.strings.outputs.wheel-output-dir }}
          package-dir: ${{ steps.strings.outputs.work-dir }}/tools/pykernel
          config-file: "${{ steps.strings.outputs.work-dir }}/tools/pykernel/pyproject.toml"

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: pykernel-wheel
          path: ${{ steps.strings.outputs.wheel-output-dir }}/*.whl
          if-no-files-found: error

  test-pykernel-wheel-install:
    needs: build-pykernel-wheel
    timeout-minutes: 30
    name: Test pykernel Wheel Installation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Git safe dir
        run: git config --global --add safe.directory $(pwd)

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: pykernel-wheel
          path: ./dist

      - name: Test wheel installation
        shell: bash
        run: |
          WHEEL_FILE=$(ls ./dist/pykernel-*.whl)
          echo "Installing wheel: $WHEEL_FILE"
          pip install $WHEEL_FILE

          # Test the ttmlir installation
          python -c "from ttmlir import ir; print('Imported ttmlir & Created CTX: ', ir.Context())"

          # Test the pykernel installation
          python -c "import pykernel; print('Imported pykernel:', pykernel)"

  test-ttmlir-wheel-install:
    needs: build-ttmlir-wheel
    timeout-minutes: 30
    name: Test ttmlir Wheel Installation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Git safe dir
        run: git config --global --add safe.directory $(pwd)

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ttmlir-wheel
          path: ./dist

      - name: Test wheel installation
        shell: bash
        run: |
          WHEEL_FILE=$(ls ./dist/ttmlir-*.whl)
          echo "Installing wheel: $WHEEL_FILE"
          pip install $WHEEL_FILE

          # Test the installation
          python -c "from ttmlir import ir; print('Imported ttmlir & Created CTX: ', ir.Context())"

  test-ttnn-jit:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    container: # this should work on base image https://github.com/tenstorrent/tt-mlir/issues/5232
      image: ${{ inputs.docker_image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Download ttnn-jit whl
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash
        run: |
          echo "Downloading ttnn-jit whl"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Getting latest run id"
            runid="$(gh run list --workflow 'schedule-nightly.yml' --repo tenstorrent/tt-mlir --limit 1 --json databaseId --jq '.[0].databaseId')"
            echo "Latest run id: $runid"
          else
            runid="${{ github.run_id }}"
          fi
          gh run download $runid -R tenstorrent/tt-mlir --repo tenstorrent/tt-mlir --name "ttnn_jit-whl-tracy.whl"
      - name: Install ttnn-jit whl
        shell: bash
        run: |
          # ----- remove comments after solving issue: https://github.com/tenstorrent/tt-mlir/issues/5232
          # python3 -m venv testenv
          # source testenv/bin/activate
          # pip install --index-url https://download.pytorch.org/whl/cpu torch==2.7.0
          # pip install numpy
          # -----
          source env/activate
          pip install ttnn_jit-*.whl --upgrade
          python -c "import ttnn_jit; print('Successfully imported ttnn_jit:', ttnn_jit.__file__)"
          python -c "import ttnn; print('Successfully imported ttnn:', ttnn.__file__)"
