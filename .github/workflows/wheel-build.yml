name: Build ttmlir Wheel

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-wheel:
    timeout-minutes: 60
    name: Build ttmlir Python Wheel
    runs-on: tt-beta-ubuntu-2204-large

    steps:
      - name: Maximize space
        uses: tenstorrent/tt-github-actions/.github/actions/maximize_space@main

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
          echo "wheel-output-dir=$(pwd)/dist" >> "$GITHUB_OUTPUT"

      - name: Git safe dir
        run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}

      - name: Build ttmlir Wheel (manylinux)
        uses: pypa/cibuildwheel@v2.23.2
        env:
          IN_CIBW_ENV: ON
          # TODO(vprajapati): Use static tagged until merged with main to update latest tag
          CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/tenstorrent/tt-mlir/tt-mlir-manylinux-2-34:dt-35f2834c5f5d1cb68b599e12d7dae7751a73ff292364a80ee43f9adfb9b937ec
        with:
          output-dir: ${{ steps.strings.outputs.wheel-output-dir }}
          package-dir: ${{ steps.strings.outputs.work-dir }}/python
          config-file: "${{ steps.strings.outputs.work-dir }}/python/pyproject.toml"

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ttmlir-wheel
          path: ${{ steps.strings.outputs.wheel-output-dir }}/*.whl
          if-no-files-found: error

  test-wheel-install:
    needs: build-wheel
    timeout-minutes: 30
    name: Test ttmlir Wheel Installation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git safe dir
        run: git config --global --add safe.directory $(pwd)

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download wheel
        uses: actions/download-artifact@v4
        with:
          name: ttmlir-wheel
          path: ./dist

      - name: Test wheel installation
        shell: bash
        run: |
          WHEEL_FILE=$(ls ./dist/ttmlir-*.whl)
          echo "Installing wheel: $WHEEL_FILE"
          pip install $WHEEL_FILE

          # Test the installation
          python -c "from ttmlir import ir; print('Imported ttmlir & Created CTX: ', ir.Context())"
