# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [macos-latest]
        build_type: [Asan]
        c_compiler: [clang]
        include:
          #- os: ubuntu-latest
          #  c_compiler: gcc
          #  cpp_compiler: g++
          #- os: ubuntu-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: mkdir /opt/ttmlir-toolchain
      shell: bash
      run: |
        sudo mkdir -p /opt/ttmlir-toolchain
        sudo chown -R ${USER} /opt/ttmlir-toolchain

    - name: Cache ttmlir-toolchain
      uses: actions/cache@v3
      with:
        path: /opt/ttmlir-toolchain
        key: ${{ runner.OS }}-ttmlir-toolchain-cache-${{ hashFiles('env/**') }}
        restore-keys: |
          ${{ runner.OS }}-ttmlir-toolchain-cache-

    - name: Build ttmlir-toolchain
      shell: bash
      run: |
        source env/activate
        cmake -B env/build env
        cmake --build env/build

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash
      run: |
        source env/activate
        cmake -G Ninja \
        -B ${{ steps.strings.outputs.build-output-dir }} \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -S ${{ github.workspace }}

    - name: Build
      shell: bash
      run: |
        source env/activate
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Lint
      shell: bash
      run: |
        source env/activate
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- clang-tidy

    - name: Test
      shell: bash
      run: |
        source env/activate
        pip install lit
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- check-ttmlir
