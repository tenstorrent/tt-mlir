name: "Build tt-mlir"
description: "Composite action for building, testing, and uploading artifacts for tt-mlir."
inputs:
  enable-perf:
    description: "Enable performance tracing"
    default: "OFF"
    required: false
  enable-op-model:
    description: "Enable op model interface tests"
    default: "OFF"
    required: false
  enable-emitc:
    description: "Enable EmitC tests"
    default: "OFF"
    required: false
  enable-explorer:
    description: "Enable explorer build"
    default: "OFF"
    required: false
  enable-runtime-debug:
    description: "Enable runtime debug"
    default: "OFF"
    required: false
  enable-pykernel:
    description: "Enable PyKernel build"
    default: "OFF"
    required: false
  build-name:
    description: "A unique name for this build (e.g., 'run' or 'perf')"
    required: true
  build-output-dir:
    description: "Build folder location"
    required: true
  install-output-dir:
    description: "Install folder location"
    required: true
  work-dir:
    description: "tt-mlir root"
    required: true
  test_report_path:
    description: "Path to test report"
    required: true

runs:
  using: "composite"
  steps:

    - name: Configure CMake
      shell: bash
      run: |
        source env/activate
        cmake -G Ninja \
          -B ${{ inputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=clang++-17 \
          -DCMAKE_C_COMPILER=clang-17 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ inputs.install-output-dir }} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DTTMLIR_ENABLE_RUNTIME=ON \
          -DTTMLIR_ENABLE_RUNTIME_TESTS=ON \
          -DTT_RUNTIME_ENABLE_PERF_TRACE=${{ inputs.enable-perf }} \
          -DTTMLIR_ENABLE_PYKERNEL=${{ inputs.enable-pykernel }} \
          -DTTMLIR_ENABLE_STABLEHLO=ON \
          -DTTMLIR_ENABLE_OPMODEL=${{ inputs.enable-op-model }} \
          -DTT_RUNTIME_DEBUG=${{ inputs.enable-runtime-debug }} \
          -S ${{ inputs.work-dir }}

    - name: Build
      shell: bash
      run: |
        source env/activate
        ccache -z
        cmake --build ${{ inputs.build-output-dir }}
        ccache -s

    - name: Build ttrt
      shell: bash
      run: |
        source env/activate
        cmake --build ${{ inputs.build-output-dir }} -- ttrt
        cmake --build ${{ inputs.build-output-dir }} -- compile-ttmlir-tests

    - name: Compile dylibs for EmitC
      shell: bash
      if: inputs.enable-emitc == 'ON'
      run: |
        source env/activate
        export LD_LIBRARY_PATH="${TTMLIR_TOOLCHAIN_DIR}/lib:${LD_LIBRARY_PATH}"
        llvm-lit -sv ${{ inputs.work-dir }}/test/ttmlir/EmitC/TTNN
        ${{ inputs.work-dir }}/tools/ttnn-standalone/ci_compile_dylib.py

    - name: Build tt-explorer
      if: inputs.enable-explorer == 'ON'
      shell: bash
      run: |
        source env/activate
        cmake --build ${{ inputs.build-output-dir }} -- explorer

    # Install needs to run after the "Compile dylibs" step
    #
    - name: Install
      shell: bash
      run: |
        source env/activate
        cmake --install ${{ inputs.build-output-dir }} --component Test
        cmake --install ${{ inputs.build-output-dir }} --component SharedLib
        cmake --install ${{ inputs.build-output-dir }} --component TTNNStandalone

    - name: Upload ttrt .whl
      uses: actions/upload-artifact@v4
      with:
        name: ttrt-whl-${{ inputs.build-name }}
        path: build/runtime/tools/ttrt/build/ttrt*.whl

    - name: Archive Install Directory
      shell: bash
      working-directory: ${{ inputs.install-output-dir }}
      run: tar cf artifact.tar .

    - name: Upload Install Folder
      uses: actions/upload-artifact@v4
      with:
        name: install-artifacts-${{ inputs.build-name }}
        path: ${{ inputs.install-output-dir }}/artifact.tar

    - name: Remove tar archive
      shell: bash
      run: rm -f ${{ inputs.install-output-dir }}/artifact.tar

    - name: Archive Build Directory
      shell: bash
      working-directory: ${{ inputs.build-output-dir }}
      run: tar cf artifact.tar .

    - name: Upload Build Folder
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ inputs.build-name }}
        path: ${{ inputs.build-output-dir }}/artifact.tar

    - name: Remove tar archive
      shell: bash
      run: rm -f ${{ inputs.build-output-dir }}/artifact.tar

    - name: Get Latest Tag and Version
      shell: bash
      run: |
        latest_tag=$(git describe --tags --match 'v[0-9]*.[0-9]*' --abbrev=0)
        latest_tag=${latest_tag#v}
        echo "latest_tag=$latest_tag" >> $GITHUB_ENV
        commit_count=$(git rev-list ${{ env.latest_tag }}..HEAD --count)
        echo "commit_count=$commit_count" >> $GITHUB_ENV
        version="${{ env.latest_tag }}.${{ env.commit_count }}"
        echo "version=$version" >> $GITHUB_ENV
        echo $version
