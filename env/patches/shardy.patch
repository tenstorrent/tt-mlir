diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100755
index 0000000..a2d940d
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,58 @@
+# Custom embedded build for Shardy, targgeting minimal build as a part of
+# tt-mlir MLIR project. This CMakeLists.txt file is mainly from StableHLO.
+
+cmake_minimum_required(VERSION 3.15.0)
+
+# CMP0116: Ninja generators transform `DEPFILE`s from `add_custom_command()`
+# New in CMake 3.20. https://cmake.org/cmake/help/latest/policy/CMP0116.html
+if(POLICY CMP0116)
+  cmake_policy(SET CMP0116 OLD)
+endif()
+
+option(SHARDY_EMBEDDED_BUILD "Build Shardy as part of another project" ON)
+option(SHARDY_ENABLE_LLD "Use LLD as the linker if available" OFF)
+
+message(STATUS "Building Shardy embedded in another project")
+project(shardy LANGUAGES CXX C)
+set(CMAKE_C_STANDARD 11)
+set(CMAKE_CXX_STANDARD 17)
+
+find_package(MLIR REQUIRED CONFIG)
+
+set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/bin)
+set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/lib)
+list(APPEND CMAKE_MODULE_PATH "${MLIR_CMAKE_DIR}")
+list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
+include(HandleLLVMOptions)
+
+include(TableGen)
+include(AddLLVM)
+include(AddMLIR)
+include(AddMLIRPython)
+
+include(CheckCXXCompilerFlag)
+include(CheckLinkerFlag)
+
+if (SHARDY_ENABLE_LLD)
+  message(STATUS "Enabling LLD as the linker")
+  add_link_options("-fuse-ld=lld")
+endif()
+
+include_directories(${LLVM_INCLUDE_DIRS})
+include_directories(${MLIR_INCLUDE_DIRS})
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+include_directories(${CMAKE_CURRENT_BINARY_DIR})
+link_directories(${LLVM_BUILD_LIBRARY_DIR})
+add_definitions(${LLVM_DEFINITIONS})
+
+set(SHARDY_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
+set(SHARDY_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
+
+add_compile_options(-Wno-deprecated-declarations -Wno-unused-but-set-variable -Wno-sign-compare -Wno-defaulted-function-deleted)
+
+add_subdirectory(shardy/common)
+add_subdirectory(shardy/dialect/sdy/ir)
+add_subdirectory(shardy/dialect/sdy/transforms)
+add_subdirectory(shardy/integrations/python/ir)
+add_subdirectory(shardy/integrations/c)
+add_subdirectory(shardy/round_trip_import)
diff --git a/shardy/common/CMakeLists.txt b/shardy/common/CMakeLists.txt
new file mode 100644
index 0000000..e35e927
--- /dev/null
+++ b/shardy/common/CMakeLists.txt
@@ -0,0 +1,17 @@
+# Shardy MLIR Common
+
+add_mlir_library(SdyCommonFileUtils
+  file_utils.cc
+  save_module_op.cc
+
+  DEPENDS
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRSupport
+  SdyDialect
+)
diff --git a/shardy/dialect/sdy/ir/CMakeLists.txt b/shardy/dialect/sdy/ir/CMakeLists.txt
new file mode 100755
index 0000000..b2c87de
--- /dev/null
+++ b/shardy/dialect/sdy/ir/CMakeLists.txt
@@ -0,0 +1,106 @@
+# Shardy MLIR dialect.
+
+set(LLVM_TARGET_DEFINITIONS dialect.td)
+mlir_tablegen(dialect.h.inc -gen-dialect-decls -dialect=sdy)
+mlir_tablegen(dialect.cc.inc -gen-dialect-defs -dialect=sdy)
+add_public_tablegen_target(SdyDialectIncGen)
+add_dependencies(mlir-headers SdyDialectIncGen)
+add_mlir_doc(dialect SdyDialect src/autogen/md/Dialect/ -gen-dialect-doc)
+
+set(LLVM_TARGET_DEFINITIONS ops.td)
+mlir_tablegen(ops.h.inc -gen-op-decls)
+mlir_tablegen(ops.cc.inc -gen-op-defs)
+add_public_tablegen_target(SdyOpsIncGen)
+add_dependencies(mlir-headers SdyOpsIncGen)
+
+set(LLVM_TARGET_DEFINITIONS attrs.td)
+mlir_tablegen(attrs.h.inc -gen-attrdef-decls)
+mlir_tablegen(attrs.cc.inc -gen-attrdef-defs)
+add_public_tablegen_target(SdyAttrsIncGen)
+add_dependencies(mlir-headers SdyAttrsIncGen)
+
+set(LLVM_TARGET_DEFINITIONS enums.td)
+mlir_tablegen(enums.h.inc -gen-enum-decls)
+mlir_tablegen(enums.cc.inc -gen-enum-defs)
+add_public_tablegen_target(SdyEnumsIncGen)
+add_dependencies(mlir-headers SdyEnumsIncGen)
+
+set(LLVM_TARGET_DEFINITIONS op_interface.td)
+mlir_tablegen(op_interface.h.inc -gen-op-interface-decls)
+mlir_tablegen(op_interface.cc.inc -gen-op-interface-defs)
+add_public_tablegen_target(SdyOpInterfaceIncGen)
+add_dependencies(mlir-headers SdyOpInterfaceIncGen)
+
+set(LLVM_TARGET_DEFINITIONS canonicalization.td)
+mlir_tablegen(canonicalization.cc.inc -gen-rewriters)
+add_public_tablegen_target(SdyCanonicalizationIncGen)
+add_dependencies(mlir-headers SdyCanonicalizationIncGen)
+
+set(LLVM_TARGET_DEFINITIONS bytecode.td)
+mlir_tablegen(bytecode.cc.inc -gen-bytecode -bytecode-dialect=sdy)
+add_public_tablegen_target(SdyBytecodeIncGen)
+add_dependencies(mlir-headers SdyBytecodeIncGen)
+
+add_mlir_dialect_library(SdyDialect
+  bytecode.cc
+  canonicalization.cc
+  dialect.cc
+  extensions/stablehlo_extensions.cc
+  parsers.cc
+  printers.cc
+  utils.cc
+  verifiers.cc
+
+  DEPENDS
+  SdyDialectIncGen
+  SdyOpsIncGen
+  SdyAttrsIncGen
+  SdyEnumsIncGen
+  SdyOpInterfaceIncGen
+  SdyCanonicalizationIncGen
+  SdyBytecodeIncGen
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRBytecodeOpInterface
+  MLIRFuncDialect
+  MLIRIR
+  MLIRInferTypeOpInterface
+  MLIRTransformUtils
+  MLIRShapeDialect
+  MLIRSideEffectInterfaces
+  MLIRSupport
+  StablehloAssemblyFormat
+  StablehloOps
+  StablehloTypeInference
+)
+
+target_include_directories(SdyDialect INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
+
+add_mlir_dialect_library(SdyRegister
+  register.cc
+
+  LINK_LIBS PUBLIC
+  SdyDialect
+  MLIRFuncDialect
+  MLIRFuncAllExtensions
+  MLIRIR
+  StablehloOps
+)
+
+target_include_directories(SdyRegister INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
+
+add_mlir_dialect_library(SdyAxisListRef
+  axis_list_ref.cc
+
+  LINK_LIBS PUBLIC
+  SdyDialect
+  LLVMSupport
+  MLIRSupport
+)
diff --git a/shardy/dialect/sdy/transforms/CMakeLists.txt b/shardy/dialect/sdy/transforms/CMakeLists.txt
new file mode 100755
index 0000000..90e2fc5
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/CMakeLists.txt
@@ -0,0 +1,26 @@
+# Shardy MLIR Transforms Passes
+
+add_subdirectory(common)
+add_subdirectory(export)
+add_subdirectory(import)
+add_subdirectory(propagation)
+
+add_mlir_library(SdyTransformsPasses
+  passes.cc
+
+  DEPENDS
+  SdyTransformsExportPasses
+  SdyTransformsImportPasses
+  SdyTransformsPropagationPasses
+
+  LINK_LIBS PUBLIC
+  MLIRPass
+  SdyTransformsExportPasses
+  SdyTransformsImportPasses
+  SdyTransformsPropagationPasses
+)
+
+target_include_directories(SdyTransformsPasses INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
diff --git a/shardy/dialect/sdy/transforms/common/CMakeLists.txt b/shardy/dialect/sdy/transforms/common/CMakeLists.txt
new file mode 100755
index 0000000..3b414d1
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/common/CMakeLists.txt
@@ -0,0 +1,29 @@
+# Shardy MLIR Transforms Common
+
+add_mlir_library(SdyTransformsCommonOpProperties
+  op_properties.cc
+
+  DEPENDS
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  MLIRIR
+  MLIRSupport
+  StablehloBase
+  StablehloOps
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsCommonShardingWalker
+  sharding_walker.cc
+
+  DEPENDS
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRSupport
+  SdyDialect
+)
diff --git a/shardy/dialect/sdy/transforms/export/CMakeLists.txt b/shardy/dialect/sdy/transforms/export/CMakeLists.txt
new file mode 100755
index 0000000..097780a
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/export/CMakeLists.txt
@@ -0,0 +1,93 @@
+# Shardy MLIR Transform Export Passes and Pipeline
+
+set(LLVM_TARGET_DEFINITIONS passes.td)
+mlir_tablegen(passes.h.inc -gen-pass-decls -name=SdyExport)
+add_public_tablegen_target(SdyExportPassesIncGen)
+add_dependencies(mlir-headers SdyExportPassesIncGen)
+add_mlir_doc(passes SdyTransformsExportPasses ./ -gen-pass-doc)
+
+add_mlir_library(SdyExplicitReshardsUtil
+  explicit_reshards_util.cc
+
+  DEPENDS
+  SdyCommonFileUtils
+  SdyAxisListRef
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+  SdyTransformsPropagationOpShardingRuleRegistry
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyTransformsPropagationDebuggingSourceSharding
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRRewrite
+  MLIRSideEffectInterfaces
+  MLIRSupport
+  MLIRTransformUtils
+  StablehloOps
+)
+
+add_mlir_library(SdyTransformsExportPasses
+  close_shardings.cc
+  constant_merger.cc
+  drop_sharding_rules.cc
+  export_pipeline.cc
+  insert_explicit_reshards.cc
+  remove_sharding_groups.cc
+  reshard_to_collectives.cc
+  sharding_constraint_to_reshard.cc
+  sink_data_flow_edges.cc
+  temp_explicit_reshards_for_optimizations.cc
+  update_non_divisible_input_output_shardings.cc
+
+  DEPENDS
+  SdyExplicitReshardsUtil
+  SdyExportPassesIncGen
+  SdyCommonFileUtils
+  SdyAxisListRef
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+  SdyTransformsPropagationOpShardingRuleRegistry
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyTransformsPropagationDebuggingSourceSharding
+  SdyTransformsImportPasses
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRRewrite
+  MLIRSideEffectInterfaces
+  MLIRSupport
+  MLIRTransformUtils
+  StablehloOps
+  SdyCommonFileUtils
+  SdyAxisListRef
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+  SdyTransformsPropagationOpShardingRuleRegistry
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyTransformsPropagationDebuggingSourceSharding
+  SdyExplicitReshardsUtil
+  SdyTransformsImportPasses
+)
+
+target_include_directories(SdyTransformsExportPasses INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
+
+target_include_directories(SdyExplicitReshardsUtil INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
diff --git a/shardy/dialect/sdy/transforms/import/CMakeLists.txt b/shardy/dialect/sdy/transforms/import/CMakeLists.txt
new file mode 100755
index 0000000..9415122
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/import/CMakeLists.txt
@@ -0,0 +1,46 @@
+# Shardy MLIR Transforms Import Passes and Pipeline
+
+set(LLVM_TARGET_DEFINITIONS passes.td)
+mlir_tablegen(passes.h.inc -gen-pass-decls -name=SdyImport)
+add_public_tablegen_target(SdyTransformsImportPassesIncGen)
+add_dependencies(mlir-headers SdyTransformsImportPassesIncGen)
+add_mlir_doc(passes SdyTransformsImportPasses ./ -gen-pass-doc)
+
+add_mlir_library(SdyTransformsImportPasses
+  add_data_flow_edges.cc
+  apply_sharding_constraints.cc
+  constant_splitter.cc
+  import_pipeline.cc
+  inline_meshes.cc
+  lift_inlined_meshes.cc
+  manual_axes_cleanup.cc
+  sharding_group_import.cc
+
+  DEPENDS
+  SdyTransformsImportPassesIncGen
+  SdyCommonFileUtils
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRRewrite
+  MLIRSideEffectInterfaces
+  MLIRSupport
+  MLIRTransformUtils
+  MLIRTransforms
+  StablehloOps
+  SdyCommonFileUtils
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+)
+
+target_include_directories(SdyTransformsImportPasses INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
diff --git a/shardy/dialect/sdy/transforms/propagation/CMakeLists.txt b/shardy/dialect/sdy/transforms/propagation/CMakeLists.txt
new file mode 100755
index 0000000..02948f6
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/propagation/CMakeLists.txt
@@ -0,0 +1,188 @@
+# Shardy MLIR Transform Propagation System
+
+add_subdirectory(debugging)
+
+set(LLVM_TARGET_DEFINITIONS passes.td)
+mlir_tablegen(passes.h.inc -gen-pass-decls -name=SdyPropagation)
+add_public_tablegen_target(SdyTransformsPropagationPassesIncGen)
+add_dependencies(mlir-headers SdyTransformsPropagationPassesIncGen)
+add_mlir_doc(passes SdyTransformsPropagationPasses ./ -gen-pass-doc)
+
+add_mlir_library(SdyTransformsPropagationPasses
+  aggressive_propagation.cc
+  basic_propagation.cc
+  op_priority_propagation.cc
+  populate_op_sharding_rules.cc
+  propagation_pipeline.cc
+  user_priority_propagation.cc
+
+  DEPENDS
+  SdyTransformsPropagationAggressiveFactorPropagation
+  SdyTransformsPropagationAutoPartitionerRegistry
+  SdyTransformsPropagationBasicFactorPropagation
+  SdyTransformsPropagationOpShardingRuleBuilder
+  SdyTransformsPropagationOpShardingRuleRegistry
+  SdyTransformsPropagationPassesIncGen
+  SdyTransformsPropagationShardingGroupMap
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyCommonFileUtils
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+  SdyTransformsExportPasses
+  SdyTransformsImportPasses
+  SdyTransformsPropagationDebuggingSourceSharding
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRBufferizationDialect
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRRewrite
+  MLIRSideEffectInterfaces
+  MLIRSupport
+  MLIRTransformUtils
+  StablehloOps
+  SdyTransformsPropagationAggressiveFactorPropagation
+  SdyTransformsPropagationAutoPartitionerRegistry
+  SdyTransformsPropagationBasicFactorPropagation
+  SdyTransformsPropagationOpShardingRuleBuilder
+  SdyTransformsPropagationOpShardingRuleRegistry
+  SdyTransformsPropagationShardingGroupMap
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyCommonFileUtils
+  SdyDialect
+  SdyTransformsCommonOpProperties
+  SdyTransformsCommonShardingWalker
+  SdyTransformsExportPasses
+  SdyTransformsImportPasses
+  SdyTransformsPropagationDebuggingSourceSharding
+)
+
+target_include_directories(SdyTransformsPropagationPasses INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
+
+add_mlir_library(SdyTransformsPropagationOpShardingRuleBuilder
+  op_sharding_rule_builder.cc
+
+  DEPENDS
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRSupport
+  StablehloOps
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsPropagationOpShardingRuleRegistry
+  op_sharding_rule_registry.cc
+
+  DEPENDS
+  SdyTransformsPropagationOpShardingRuleBuilder
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRSupport
+  StablehloOps
+  SdyTransformsPropagationOpShardingRuleBuilder
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsPropagationShardingGroupMap
+  sharding_group_map.cc
+
+  DEPENDS
+  SdyTransformsPropagationUtils
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRSupport
+  SdyTransformsPropagationUtils
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsPropagationShardingProjection
+  sharding_projection.cc
+
+  DEPENDS
+  SdyTransformsPropagationUtils
+  SdyAxisListRef
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRSupport
+  SdyTransformsPropagationUtils
+  SdyAxisListRef
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsPropagationAutoPartitionerRegistry
+  auto_partitioner_registry.cc
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRPass
+)
+
+add_mlir_library(SdyTransformsPropagationUtils
+  utils.cc
+
+  DEPENDS
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRSupport
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsPropagationBasicFactorPropagation
+  basic_factor_propagation.cc
+
+  DEPENDS
+  SdyTransformsPropagationShardingProjection
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRSupport
+  SdyTransformsPropagationShardingProjection
+  SdyDialect
+)
+
+add_mlir_library(SdyTransformsPropagationAggressiveFactorPropagation
+  aggressive_factor_propagation.cc
+
+  DEPENDS
+  SdyTransformsPropagationBasicFactorPropagation
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyDialect
+  SdyTransformsCommonOpProperties
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRSupport
+  SdyTransformsPropagationBasicFactorPropagation
+  SdyTransformsPropagationShardingProjection
+  SdyTransformsPropagationUtils
+  SdyDialect
+  SdyTransformsCommonOpProperties
+)
diff --git a/shardy/dialect/sdy/transforms/propagation/debugging/CMakeLists.txt b/shardy/dialect/sdy/transforms/propagation/debugging/CMakeLists.txt
new file mode 100644
index 0000000..dc33501
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/propagation/debugging/CMakeLists.txt
@@ -0,0 +1,17 @@
+# Shardy MLIR Transforms Propagation Debugging System
+
+add_mlir_library(SdyTransformsPropagationDebuggingSourceSharding
+  source_sharding.cc
+
+  DEPENDS
+  SdyDialect
+  SdyTransformsPropagationShardingProjection
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRSupport
+  SdyDialect
+  SdyTransformsPropagationShardingProjection
+)
diff --git a/shardy/integrations/c/CMakeLists.txt b/shardy/integrations/c/CMakeLists.txt
new file mode 100644
index 000000000..fdd50c4ba
--- /dev/null
+++ b/shardy/integrations/c/CMakeLists.txt
@@ -0,0 +1,20 @@
+add_mlir_public_c_api_library(SdyCAPI
+  PARTIAL_SOURCES_INTENDED
+  attributes.cc
+  dialect.cc
+  passes.cc
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRBytecodeOpInterface
+  MLIRFuncDialect
+  MLIRIR
+  MLIRInferTypeOpInterface
+  MLIRTransformUtils
+  MLIRShapeDialect
+  MLIRSideEffectInterfaces
+  MLIRSupport
+  StablehloAssemblyFormat
+  StablehloOps
+  StablehloTypeInference
+)
diff --git a/shardy/integrations/python/ir/CMakeLists.txt b/shardy/integrations/python/ir/CMakeLists.txt
new file mode 100644
index 000000000..86ca2aeb7
--- /dev/null
+++ b/shardy/integrations/python/ir/CMakeLists.txt
@@ -0,0 +1,45 @@
+# Shardy MLIR Module
+
+set(SHARDY_MODULE_DIR "${TTMLIR_TOOLCHAIN_DIR}/src/shardy/shardy/integrations/python/ir")
+
+# Rename _sdy_enums_gen in sdy.py
+file(READ "${SHARDY_MODULE_DIR}/sdy.py" FILE_CONTENTS)
+string(REPLACE "enums" "enum" FILE_CONTENTS "${FILE_CONTENTS}")
+file(WRITE "${SHARDY_MODULE_DIR}/sdy.py" "${FILE_CONTENTS}")
+
+if (EXISTS ${SHARDY_MODULE_DIR}/dialects)
+  file(REMOVE_RECURSE ${SHARDY_MODULE_DIR}/dialects)
+endif()
+file(MAKE_DIRECTORY ${SHARDY_MODULE_DIR}/dialects)
+FILE(COPY ${SHARDY_MODULE_DIR}/sdy.py DESTINATION ${SHARDY_MODULE_DIR}/dialects)
+FILE(COPY ${SHARDY_MODULE_DIR}/sdy_ops.td DESTINATION ${SHARDY_MODULE_DIR}/dialects)
+FILE(COPY ${SHARDY_MODULE_DIR}/sdy_enums.td DESTINATION ${SHARDY_MODULE_DIR}/dialects)
+
+declare_mlir_python_sources(SdyPythonSources)
+declare_mlir_python_sources(SdyPythonSources.Dialects
+  ADD_TO_PARENT SdyPythonSources
+)
+
+declare_mlir_dialect_python_bindings(
+  ADD_TO_PARENT SdyPythonSources.Dialects
+  ROOT_DIR "${SHARDY_MODULE_DIR}"
+  TD_FILE dialects/sdy_ops.td
+  GEN_ENUM_BINDINGS ON
+  GEN_ENUM_BINDINGS_TD_FILE dialects/sdy_enums.td
+  SOURCES dialects/sdy.py
+  DIALECT_NAME sdy
+)
+
+declare_mlir_python_sources(SdyPythonExtensions)
+declare_mlir_python_extension(SdyPythonExtensions.Main
+  MODULE_NAME _sdy
+  ADD_TO_PARENT SdyPythonExtensions
+  PYTHON_BINDINGS_LIBRARY nanobind
+  SOURCES
+    sdy_module.cc
+  EMBED_CAPI_LINK_LIBS
+    SdyCAPI
+  PRIVATE_LINK_LIBS
+    SdyCAPI
+    LLVMSupport
+)
diff --git a/shardy/round_trip_import/CMakeLists.txt b/shardy/round_trip_import/CMakeLists.txt
new file mode 100644
index 0000000..1afbf24
--- /dev/null
+++ b/shardy/round_trip_import/CMakeLists.txt
@@ -0,0 +1,125 @@
+# Shardy MLIR Roundtrip Import Passes
+
+add_mlir_translation_library(SdyRoundtripUtils
+  utils.cc
+
+  DEPENDS
+  SdyDialect
+  SdyRegister
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRAsmParser
+  MLIRFuncDialect
+  MLIRFuncAllExtensions
+  MLIRIR
+  MLIRSupport
+  StablehloOps
+  SdyDialect
+  SdyRegister
+)
+
+add_mlir_translation_library(SdyRoundtripImportSdyCustomCalls
+  import_sdy_custom_calls.cc
+
+  DEPENDS
+  SdyRoundtripUtils
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRIR
+  MLIRPass
+  MLIRSupport
+  MLIRTransformUtils
+  StablehloOps
+  SdyRoundtripUtils
+  SdyDialect
+)
+
+add_mlir_translation_library(SdyRoundtripImportUninlineableFuncCalls
+  import_uninlineable_func_calls.cc
+
+  DEPENDS
+  SdyRoundtripUtils
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRSupport
+  MLIRTransformUtils
+  MLIRTransforms
+  StablehloOps
+  SdyRoundtripUtils
+  SdyDialect
+)
+
+add_mlir_translation_library(SdyRoundtripImportShardyAttrs
+  import_shardy_attrs.cc
+
+  DEPENDS
+  SdyRoundtripUtils
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRAsmParser
+  MLIRFuncDialect
+  MLIRIR
+  MLIRParser
+  MLIRPass
+  MLIRSupport
+  MLIRTransformUtils
+  StablehloOps
+  SdyRoundtripUtils
+  SdyDialect
+)
+
+add_mlir_translation_library(SdyRoundtripShardMapImport
+  shard_map_import.cc
+
+  DEPENDS
+  SdyRoundtripUtils
+  SdyDialect
+
+  LINK_LIBS PUBLIC
+  LLVMSupport
+  MLIRFuncDialect
+  MLIRIR
+  MLIRPass
+  MLIRSupport
+  MLIRTransformUtils
+  StablehloOps
+  SdyRoundtripUtils
+  SdyDialect
+)
+
+add_mlir_translation_library(SdyRoundtripPipelines
+  pipelines.cc
+
+  DEPENDS
+  SdyRoundtripImportUninlineableFuncCalls
+  SdyRoundtripImportSdyCustomCalls
+  SdyRoundtripImportShardyAttrs
+  SdyRoundtripShardMapImport
+
+  LINK_LIBS PUBLIC
+  MLIRFuncDialect
+  MLIRPass
+  MLIRSupport
+  MLIRTransformUtils
+  MLIRTransforms
+  StablehloPasses
+  SdyRoundtripImportUninlineableFuncCalls
+  SdyRoundtripImportSdyCustomCalls
+  SdyRoundtripImportShardyAttrs
+  SdyRoundtripShardMapImport
+)
+
+target_include_directories(SdyRoundtripPipelines INTERFACE
+  $<BUILD_INTERFACE:${SHARDY_SOURCE_DIR}>
+  $<BUILD_INTERFACE:${SHARDY_BINARY_DIR}>
+)
