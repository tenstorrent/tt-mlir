namespace tt.target;

struct Dim2d {
  y: int;
  x: int;
}

struct Dim2dRange {
  loc: Dim2d;
  size: Dim2d;
}

enum Arch: uint {
  Grayskull = 0,
  Wormhole_b0 = 1,
  Blackhole = 2,
}

enum DataType: ushort {
  Float32 = 0,
  Float16 = 1,
  BFloat16 = 2,
  BFP_Float8 = 3,
  BFP_BFloat8 = 4,
  BFP_Float4 = 5,
  BFP_BFloat4 = 6,
  BFP_Float2 = 7,
  BFP_BFloat2 = 8,
  UInt32 = 9,
  UInt16 = 10,
  UInt8 = 11,
}

enum OOBVal: ushort {
  Undef = 0,
  Zero = 1,
  One = 2,
  Inf = 3,
  NegInf = 4,
}

enum MemorySpace: ushort {
  System = 0,
  SystemMMIO = 1,
  DeviceDRAM = 2,
  DeviceL1 = 3,
}

enum ChipCapability: uint32 (bit_flags) {
  PCIE = 0,
  HostMMIO = 1,
}

table MemoryDesc {
  shape: [int];
  tile_shape: Dim2d;
  data_type: DataType;
  memory_space: MemorySpace;
  size: uint64;
}

table LayoutDesc {
  stride: [int];
  oob_val: OOBVal;
  core_range_set: [Dim2dRange];
  memory_desc: MemoryDesc;
}

table TensorDesc {
  shape: [int];
  layout: LayoutDesc;
  constant_data: [ubyte];
}

table CBDesc {
  port: uint32;
  memory_desc: MemoryDesc;
  page_size: uint64;
  num_buffers: uint64;
}

table TensorRef {
  global_id: uint32;
  address: uint64;
  size: uint64;
  desc: TensorDesc;
}

table CBRef {
  global_id: uint32;
  tensor_ref: TensorRef;
  address: uint64;
  desc: CBDesc;
}

table ChipDesc {
  arch: Arch;
  grid_size: Dim2d;
  l1_size: uint64;
  num_dram_channels: uint32;
  dram_channel_size: uint64;
  noc_l1_address_align_bytes: uint32;
  pcie_address_align_bytes: uint32;
  noc_dram_address_align_bytes: uint32;
  l1_unreserved_base: uint32;
  erisc_l1_unreserved_base: uint32;
  dram_unreserved_base: uint32;
  physical_cores: ChipPhysicalCores;
}

struct ChipCoord {
  rack: uint32;
  shelf: uint32;
  y: uint32;
  x: uint32;
}

struct ChipChannel {
  device_id0: uint32;
  ethernet_core_coord0: Dim2d;
  device_id1: uint32;
  ethernet_core_coord1: Dim2d;
}

table ChipPhysicalCores {
  worker: [Dim2d];
  dram: [Dim2d];
  eth: [Dim2d];
  eth_inactive: [Dim2d];
}

table SystemDesc {
  chip_descs: [ChipDesc];
  chip_desc_indices: [uint32];
  chip_capabilities: [ChipCapability];
  chip_coords: [ChipCoord];
  chip_channels: [ChipChannel];
}

table DeviceRef {
  global_id: uint32;
}

table EventRef {
  global_id: uint32;
}
