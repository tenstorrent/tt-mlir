namespace tt.target;

struct Dim2d {
  y: int;
  x: int;
}

struct Dim2dRange {
  loc: Dim2d;
  size: Dim2d;
}

enum Arch: uint {
  Grayskull,
  Wormhole_b0,
  Blackhole
}

enum DataType: uint16 {
  Float32,
  Float16,
  BFloat16,
  BFP_Float8,
  BFP_BFloat8,
  BFP_Float4,
  BFP_BFloat4,
  BFP_Float2,
  BFP_BFloat2,
  UInt32,
  UInt16,
  UInt8,
}

enum OOBVal: ushort {
  Undef,
  Zero,
  One,
  Inf,
  NegInf,
}

enum MemorySpace: ushort {
  System,
  SystemMMIO,
  DeviceDRAM,
  DeviceL1,
}

enum ChipCapability: uint32 (bit_flags) {
  PCIE,
  HostMMIO,
}

enum TensorMemoryLayout: ushort {
  None,
  Interleaved,
  SingleBank,
  HeightSharded,
  WidthSharded,
  BlockSharded,
}

enum TensorLayout: ushort {
  RowMajor,
  Tile,
  Invalid,
}

enum BufferType: ushort {
  DRAM,
  L1,
  SystemMemory,
  L1Small,
  Trace,
}

// TODO (#620): Add other fields like core_ranges, shard orientation etc.
table ShardSpec {
  shard_shape: [int64];
}

table MemoryConfigDesc {
  tensor_memory_layout: TensorMemoryLayout;
  buffer_type: BufferType;
  shard_spec: ShardSpec;
}

table ReplicateTensor {
  replication_factor: uint32;
}

table ShardTensor {
  shard_dim: uint32;
}

table ShardTensor2D {
  shard_mesh: Dim2d;
}

table AllGatherTensor {

}

union DistributedTensorConfig {
  ReplicateTensor,
  ShardTensor,
  ShardTensor2D,
  AllGatherTensor
}

table DistributionStrategy {
  strategy: DistributedTensorConfig;
}

table MemoryDesc {
  shape: [int];
  tile_shape: Dim2d;
  data_type: DataType;
  memory_space: MemorySpace;
  memory_layout: TensorMemoryLayout;
  size: uint64;
}

table LayoutDesc {
  stride: [int];
  oob_val: OOBVal;
  core_range_set: [Dim2dRange];
  memory_desc: MemoryDesc;
  strategy: DistributionStrategy;
}

table TensorDesc {
  shape: [int];
  layout: LayoutDesc;
}

table CBDesc {
  port: uint32;
  memory_desc: MemoryDesc;
  page_size: uint64;
  num_buffers: uint64;
}

table TensorRef {
  global_id: uint32;
  address: uint64;
  size: uint64;
  desc: TensorDesc;
}

table CBRef {
  global_id: uint32;
  tensor_ref: TensorRef;
  address: uint64;
  desc: CBDesc;
}

table ChipDesc {
  arch: Arch;
  grid_size: Dim2d;
  l1_size: uint64;
  num_dram_channels: uint32;
  dram_channel_size: uint64;
  noc_l1_address_align_bytes: uint32;
  pcie_address_align_bytes: uint32;
  noc_dram_address_align_bytes: uint32;
  l1_unreserved_base: uint32;
  erisc_l1_unreserved_base: uint32;
  dram_unreserved_base: uint32;
  dram_unreserved_end: uint32;
  physical_cores: ChipPhysicalCores;
  supported_data_types: [DataType];
  supported_tile_sizes: [Dim2d];
  num_cbs: uint32;
}

struct ChipCoord {
  rack: uint32;
  shelf: uint32;
  y: uint32;
  x: uint32;
}

struct ChipChannel {
  device_id0: uint32;
  ethernet_core_coord0: Dim2d;
  device_id1: uint32;
  ethernet_core_coord1: Dim2d;
}

table ChipPhysicalCores {
  worker: [Dim2d];
  dram: [Dim2d];
  eth: [Dim2d];
  eth_inactive: [Dim2d];
}

enum CPURole: uint8
{
  Host,
  Device,
}

table CPUDesc {
  role: CPURole;
  target_triple: string;
}

table SystemDesc {
  cpu_descs: [CPUDesc];
  chip_descs: [ChipDesc];
  chip_desc_indices: [uint32];
  chip_capabilities: [ChipCapability];
  chip_coords: [ChipCoord];
  chip_channels: [ChipChannel];
}

table DeviceRef {
  global_id: uint32;
}

table EventRef {
  global_id: uint32;
}

// Explicit non-sequential enumeration copied over from tt-metal definition of
// `enum class MathFidelity`.
enum MathFidelity : uint8 {
  LoFi = 0,
  HiFi2 = 2,
  HiFi3 = 3,
  HiFi4 = 4,
}
