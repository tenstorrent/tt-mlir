include "ttmlir/Target/Common/types.fbs";
include "ttmlir/Target/TTNN/types.fbs";

namespace tt.target.ttnn;

table ArangeOp {
  device: tt.target.DeviceRef;
  start: float;
  end: float;
  step: float;
  dtype: tt.target.DataType = null;
  layout: tt.target.TensorLayout = null;
  memcfg: tt.target.ttnn.MemoryConfig;
  out: tt.target.ttnn.TensorRef;
}

table ConstantOp {
  device: tt.target.DeviceRef;
  data: [ubyte];
  dtype: tt.target.DataType = null;
  layout: tt.target.TensorLayout = null;
  memcfg: tt.target.ttnn.MemoryConfig;
  out: tt.target.ttnn.TensorRef;
}

table EmptyOp {
  device: tt.target.DeviceRef;
  shape: [int64];
  dtype: tt.target.DataType;
  layout: tt.target.TensorLayout;
  memcfg: tt.target.ttnn.MemoryConfig;
  out: tt.target.ttnn.TensorRef;
}

table FloatingPointType {
  value: float;
}

table IntegralType {
  value: int32;
}

union FillValueType {
  FP: FloatingPointType,
  I32: IntegralType,
}

table FullOp {
  device: tt.target.DeviceRef;
  shape: [int64];
  fill_value: FillValueType;
  dtype: tt.target.DataType = null;
  layout: tt.target.TensorLayout = null;
  memcfg: tt.target.ttnn.MemoryConfig;
  out: tt.target.ttnn.TensorRef;
}

enum NamedFullOpType: uint32 {
  Zeros,
  Ones,
}

table NamedFullOp {
  type: NamedFullOpType;
  device: tt.target.DeviceRef;
  shape: [int64];
  dtype: tt.target.DataType = null;
  layout: tt.target.TensorLayout = null;
  memcfg: tt.target.ttnn.MemoryConfig;
  out: tt.target.ttnn.TensorRef;
}
