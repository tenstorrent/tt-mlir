include "Common/types.fbs";
include "Common/debug_info.fbs";

namespace tt.target.ttnn;

table OpenDeviceOp {
  mesh: Dim2d;
  chip_ids: [uint32];
  out: tt.target.DeviceRef;
}

table CloseDeviceOp {
  in0: tt.target.DeviceRef;
}

table ToMemoryConfigOp {
  in0: tt.target.TensorRef;
  out: tt.target.TensorRef;
}

table EmptyOp {
  device: tt.target.DeviceRef;
  out: tt.target.TensorRef;
}

table FullOp {
  device: tt.target.DeviceRef;
  fill_value: float;
  out: tt.target.TensorRef;
}

enum EltwiseOpType: uint32 {
  Add = 0,
  Multiply = 1,
  Subtract = 2,
  Relu = 3,
  GreaterEqual = 4,
  Sqrt = 5,
  Div = 6,
  Sigmoid = 7,
  Reciprocal = 8,
  Exp = 9,
}

table EltwiseOp {
  type: EltwiseOpType;
  ins: [tt.target.TensorRef];
  out: tt.target.TensorRef;
}

enum ReductionOpType: uint32 {
  Sum = 0,
  Mean = 1,
}

table ReductionOp {
  type: ReductionOpType;
  in: tt.target.TensorRef;
  out: tt.target.TensorRef;
  dim_arg: [int32];
  keep_dim: bool;
}

table EmbeddingOp {
  input: tt.target.TensorRef;
  weight: tt.target.TensorRef;
  output: tt.target.TensorRef;
}

table SoftmaxOp {
  in: tt.target.TensorRef;
  out: tt.target.TensorRef;
  dimension: int32;
}

table TransposeOp {
  in: tt.target.TensorRef;
  out: tt.target.TensorRef;
  dim0: int32;
  dim1: int32;
}

table ConcatOp {
 inputs: [tt.target.TensorRef];
 out: tt.target.TensorRef;
 dim: int32;
}

table ReshapeOp {
  in: tt.target.TensorRef;
  out: tt.target.TensorRef;
  shape: [int32];
}

// ANCHOR: adding_an_op_matmul_fbs
table MatmulOp {
  in0: tt.target.TensorRef;
  in1: tt.target.TensorRef;
  out: tt.target.TensorRef;
}
// ANCHOR_END: adding_an_op_matmul_fbs

union OpType {
  OpenDeviceOp,
  CloseDeviceOp,
  ToMemoryConfigOp,
  EmptyOp,
  FullOp,
  EltwiseOp,
  MatmulOp,
  ReductionOp,
  EmbeddingOp,
  SoftmaxOp,
  TransposeOp,
  ConcatOp,
  ReshapeOp
}

table Operation {
  type: OpType;
  debug_info: string;
}

table Program {
  name: string;
  inputs: [TensorRef];
  outputs: [TensorRef];
  operations: [Operation];
  debug_info: DebugInfo;
}
